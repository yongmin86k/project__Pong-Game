{"version":3,"sources":["src/settings.js","src/partials/Init.js","src/partials/Board.js","src/partials/Net.js","src/partials/Paddle.js","src/partials/Ball.js","src/partials/Score.js","src/partials/SingleMode.js","src/partials/Game.js","src/index.js"],"names":["SVG_NS","KEYS","right","left","a","z","up","down","spaceBar","enter","PaddleOptions","paddleWidth","paddleHeight","boardGap","player1Color","player2Color","speed","BallOptions","number","minSpeed","maxSpeed","ballSize","ballColor","Init","width","height","x","y","text","textSize","animate","limit","svg","selected","color","document","createElementNS","setAttributeNS","textContent","appendChild","Board","rect","Net","line","Paddle","boardHeight","upKey","downKey","score","keyState","addEventListener","event","key","Math","max","min","Ball","index","boardWidth","radius","direction","ping","Audio","pingSound","reset","vx","vy","RandomDirection","abs","Number","random","toFixed","round","hitLeft","hitRight","hitTop","hitBottom","player1","player2","play","player","setTimeout","wallCollision","paddleCollision","circle","rightGoal","leftGoal","goal","Score","size","SingleMode","tspan","tspan2","append","Game","element","gameElement","getElementById","initPlayer1","initPlayer2","caption","board","net","singlePlay","score1","score2","ball","i","showFirstScreen","isMulti","pause","startPlay","innerHTML","render","selectMode","multiPlay","game","gameLoop","requestAnimationFrame"],"mappings":"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","file":"src.b038f509.js","sourceRoot":"..","sourcesContent":["export const SVG_NS  = 'http://www.w3.org/2000/svg';\n\n// key setting for the player 1 and player 2\nexport const KEYS = {\n    right: 'ArrowRight',\n    left: 'ArrowLeft',\n    a: 'a',        // player 1 up key\n    z: 'z',        // player 1 down key\n    up: 'ArrowUp',       // player 2 up key\n    down: 'ArrowDown',     // player 2 down key\n    spaceBar: ' ', // we'll use this later...\n    enter: 'Enter',\n  }\n\n// properties of Paddle\nexport const PaddleOptions = {\n    paddleWidth : 8,\n    paddleHeight : 56,\n    boardGap : 10,\n    player1Color: '#FF0000',\n    player2Color: '#00FFFF',\n    speed: 10,\n}\n\n// properties of Ball\nexport const BallOptions = {\n    number: 1,\n    minSpeed: 3, // must be larger than 0\n    maxSpeed: 6,\n    ballSize: [8, 12, 16, 24],\n    ballColor: ['pink', 'cyan', 'yellow', 'yellowgreen']\n}","import { SVG_NS } from \"../settings\";\n\nexport default class Init {\n    constructor(width, height, x, y, text, textSize = 20){\n        this.width = width;\n        this.height = height;\n        this.x = x;\n        this.y = y;\n        this.text = text;\n        this.textSize = textSize;\n        this.animate = 0;\n        this.limit = 32;\n    }\n\n    render(svg, selected){\n        // flash the selected game option\n        if ( selected && this.animate < this.limit ){\n            this.color = 'white';\n        } else if ( selected && (this.animate >= this.limit && this.animate < this.limit * 2)){\n            this.color = 'transparent';\n        } else if (this.animate >= this.limit * 2) {\n            this.animate = 0;\n        } else if (!selected){\n            this.animate = 0;\n            this.color = 'grey';\n        };\n        this.animate++;\n        \n        // renders svg texts\n        let text = document.createElementNS(SVG_NS, 'text');\n\n        text.setAttributeNS(null, 'x', this.x );\n        text.setAttributeNS(null, 'y', this.y );\n        text.setAttributeNS(null, 'font-family', `'Silkscreen Web', monotype`);\n        text.setAttributeNS(null, 'font-size', this.textSize );\n        text.setAttributeNS(null, 'fill', this.color);\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n        text.setAttributeNS(null, 'cursor', 'pointer');\n        text.textContent = this.text;\n\n        svg.appendChild(text);\n    }\n}","import { SVG_NS } from \"../settings\";\n\nexport default class Board {\n    constructor(width, height) {\n      this.width = width;\n      this.height = height;\n    } // end of constructor\n    \n    render(svg) {\n      // create rect\n        let rect = document.createElementNS(SVG_NS, 'rect');\n        rect.setAttributeNS(null, 'fill', '#353535');\n        rect.setAttributeNS(null, 'width', this.width);\n        rect.setAttributeNS(null, 'height', this.height);\n\n        // append rect\n        svg.appendChild(rect);\n    }\n  }","import { SVG_NS } from \"../settings\";\nexport default class Net {\n    constructor(width, height) {\n      this.width = width;\n      this.height = height;\n    } // end of constructor\n    \n    render(svg) {\n      // create line\n        let line = document.createElementNS(SVG_NS, 'line');\n        line.setAttributeNS(null, 'x1', (this.width / 2) );\n        line.setAttributeNS(null, 'y1', 0 );\n        line.setAttributeNS(null, 'x2', (this.width / 2) );\n        line.setAttributeNS(null, 'y2', this.height );\n  \n        line.setAttributeNS(null, 'stroke', '#FFFFFF');\n        line.setAttributeNS(null, 'stroke-width', 2);\n        line.setAttributeNS(null, 'stroke-dasharray', [16, 34]);\n        line.setAttributeNS(null, 'stroke-dashoffset', 4);\n  \n        // append line\n        svg.appendChild(line);\n    }\n  }","import { SVG_NS, KEYS, PaddleOptions } from \"../settings\";\n\nexport default class Paddle {\n    constructor(boardHeight, width, height, x, y, color = '#FFFFFF', upKey, downKey) {\n        this.boardHeight = boardHeight;\n        this.width = width;\n        this.height = height;\n        this.x = x;\n        this.y = y;\n        this.speed = PaddleOptions.speed;\n        this.score = 0;\n        this.color = color;\n        this.upKey = upKey;\n        this.downKey = downKey;\n\n        this.keyState = {}; // update which keys are pressing\n\n        document.addEventListener('keydown', event => {\n            this.keyState[event.key] = true;\n        });\n        document.addEventListener('keyup', event => {\n            this.keyState[event.key] = false;\n        });\n    } // end of constructor\n\n    up(){\n        // move the paddle up but not above the top of the board\n        this.y = Math.max( this.y - this.speed, 0 );\n    }\n\n    down(){\n        // move the paddle down but not more than the bottom of the board\n        this.y = Math.min( this.y + this.speed, (this.boardHeight - this.height) );\n    }\n    \n    render(svg) {\n        // smoothen movement of paddles\n        if (this.keyState[KEYS.a] && this.upKey === KEYS.a ) {\n            this.up();\n        }\n        if (this.keyState[KEYS.z] && this.downKey === KEYS.z ) {\n            this.down();\n        }\n        if (this.keyState[KEYS.up] && this.upKey === KEYS.up ) {\n            this.up();\n        }\n        if (this.keyState[KEYS.down] && this.downKey === KEYS.down ) {\n            this.down();\n        }\n\n        // create SVG of rect\n        let rect = document.createElementNS(SVG_NS, 'rect');\n        rect.setAttributeNS(null, 'fill', this.color);\n        rect.setAttributeNS(null, 'width', this.width);\n        rect.setAttributeNS(null, 'height', this.height);\n        rect.setAttributeNS(null, 'x', this.x);\n        rect.setAttributeNS(null, 'y', this.y);\n\n        // append SVG\n        svg.appendChild(rect);\n    }\n}\n\n","import { SVG_NS, BallOptions } from \"../settings\";\nimport pingSound from \"../../public/sounds/pong-01.wav\";\n\nexport default class Ball {\n    constructor(index, boardWidth, boardHeight, radius = 8, color = '#FFFFFF') {\n      this.index = index;\n      this.boardWidth = boardWidth;\n      this.boardHeight = boardHeight;\n      this.radius = radius;\n      this.color = color;\n      this.direction = 1;\n\n      this.ping = new Audio(pingSound);\n      \n      this.reset();\n    } // end of constructor\n\n    reset(){\n      this.x = this.boardWidth / 2;\n      this.y = this.boardHeight / 2;\n      \n      this.vx = 0;\n      this.vy = 0;\n      \n      // start the game with random direction of the ball\n      this.RandomDirection = [-1, 1];\n      while( this.vy < Math.abs(BallOptions.minSpeed) && this.vx < Math.abs(BallOptions.minSpeed) ){ \n        this.vx = Math.max( Number((Math.random() * BallOptions.maxSpeed ).toFixed(2)), BallOptions.minSpeed ) * this.RandomDirection[Math.round(Math.random())];\n        this.vy = Math.max( Number((Math.random() * BallOptions.maxSpeed ).toFixed(2)), BallOptions.minSpeed ) * this.RandomDirection[Math.round(Math.random())];\n      }\n      // console.log( `ball number: ${Number(this.index) + 1} | size: ${this.radius} | color: ${this.color} | speed: ${ Math.ceil( Math.abs(this.vx) + Math.abs(this.vy) ) / 2}`);\n    }\n\n    wallCollision(){\n      const hitLeft = this.x - this.radius <= 0;\n      const hitRight = this.x + this.radius >= this.boardWidth;\n      const hitTop = this.y - this.radius <= 0;\n      const hitBottom = this.y + this.radius >= this.boardHeight;\n      if (hitLeft || hitRight ){ this.vx *= -1; } // this.vx = -this.vx;\n      if (hitTop || hitBottom ){ this.vy *= -1; }\n    }\n\n    paddleCollision(player1, player2) {\n      if (this.vx > 0) { // moving right\n        // collision detection for right paddle\n        if ( this.x + this.radius >= player2.x && \n          this.x + this.radius <= player2.x + player2.width &&\n          ( this.y >= player2.y && this.y <= player2.y + player2.height )\n          ){\n            // if true then there's a collision\n            this.vx *= -1;\n            this.ping.play(); // play the sound when paddle hits the ball          \n        }\n\n      } else { // moving left\n        // collision detection for left paddle\n        if ( this.x - this.radius >= player1.x && // left edge of the ball is\n          this.x - this.radius <= player1.x + player1.width &&\n          (this.y >= player1.y && this.y <= player1.y + player1.height) \n          ){\n            this.vx *= -1;\n            this.ping.play();\n          }\n      }\n    }\n\n    goal(player) {\n      player.score++;\n      this.reset();\n    }\n\n    render(svg, player1, player2){\n      setTimeout(()=>{\n      \n      }, 500);\n      // initiate the ball moving\n      this.x += this.vx;\n      // this.x += this.vx;\n      this.y += this.vy;\n\n      // bounce when the ball hits the walls\n      this.wallCollision();\n\n      // reflect when the ball hits the paddle\n      this.paddleCollision(player1, player2);\n\n      // create a ball\n      let circle = document.createElementNS(SVG_NS, 'circle');\n        circle.setAttributeNS(null, 'r', this.radius);\n        circle.setAttributeNS(null, 'fill', this.color);\n        circle.setAttributeNS(null, 'cx', this.x);\n        circle.setAttributeNS(null, 'cy', this.y);\n\n        svg.appendChild(circle);\n\n        // change ball direction when a player scores\n      const rightGoal = this.x + this.radius >= this.boardWidth;\n      const leftGoal = this.x - this.radius <= 0;\n\n        if ( rightGoal ) {\n          this.goal(player1);\n          this.direction = 1;\n        } else if ( leftGoal ){\n          this.goal(player2);\n          this.direction = -1;\n        }\n\n    }\n}","import { SVG_NS } from \"../settings\";\nexport default class Score {\n    constructor(x, y = 40, size = 32) {\n      this.x = x;\n      this.y = y;\n      this.size = size;\n    }\n    \n    render(svg, score) {\n        let text = document.createElementNS(SVG_NS, 'text');\n        text.setAttributeNS(null, 'x', this.x );\n        text.setAttributeNS(null, 'y', this.y );\n        text.setAttributeNS(null, 'font-family', `'Silkscreen Web', monotype`);\n        text.setAttributeNS(null, 'font-size', this.size );\n        text.setAttributeNS(null, 'fill', '#FFFFFF');\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n\n        text.textContent = score;\n\n        svg.appendChild(text);\n    }\n  }","import { SVG_NS, KEYS } from \"../settings\";\n\nexport default class SingleMode {\n    constructor(boardWidth, boardHeight){\n        this.x = boardWidth / 2;\n        this.y = (boardHeight / 2) - 40;\n        this.animate = 0;\n        this.limit = 56;\n    }\n\n    render(svg){\n        let text = document.createElementNS(SVG_NS, 'text');\n        let tspan = document.createElementNS(SVG_NS, 'tspan');\n        let tspan2 = document.createElementNS(SVG_NS, 'tspan');\n        text.setAttributeNS(null, 'x', this.x);\n        text.setAttributeNS(null, 'y', this.y);\n        text.setAttributeNS(null, 'fill', '#FFFFFF');\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n        text.setAttributeNS(null, 'fill', '#FFFFFF');\n        text.setAttributeNS(null, 'font-family', `'Silkscreen Web', monotype`);\n        text.setAttributeNS(null, 'font-size', 32 );\n\n        tspan.setAttributeNS(null, 'x', this.x);\n        tspan.setAttributeNS(null, 'y', this.y + 32);\n        tspan.setAttributeNS(null, 'font-size', 20 );\n\n        tspan2.setAttributeNS(null, 'x', this.x);\n        tspan2.setAttributeNS(null, 'y', this.y + 140);\n        tspan2.setAttributeNS(null, 'font-size', 16 );\n        tspan2.setAttributeNS(null, 'fill', 'transparent');\n        // flash the return text \n        if ( this.animate < this.limit / 4 ){\n            tspan2.setAttributeNS(null, 'fill', 'transparent');\n        } else if ( this.animate >= this.limit / 4 && this.animate < this.limit / 2 ){\n            tspan2.setAttributeNS(null, 'fill', '#70B2B1');\n        } else if ( this.animate >= this.limit / 2 && this.animate < this.limit / 4 * 3 ){\n            tspan2.setAttributeNS(null, 'fill', '#26601F');\n        } else if ( this.animate >= this.limit / 4 * 3 && this.animate < this.limit ){\n            tspan2.setAttributeNS(null, 'fill', '#70B2B1');\n        } else if (this.animate >= this.limit ) {\n            this.animate = 0;\n        }\n        this.animate++;\n        \n        text.textContent = 'Sorry';\n        tspan.textContent = 'Signle mode is not available';\n        tspan2.textContent = 'Press <Enter> to go back';\n        \n        svg.append(text);\n        text.append(tspan, tspan2);\n    }\n}","import Init from \"./Init\";\nimport Board from \"./Board\";\nimport Net from \"./Net\";\nimport Paddle from \"./Paddle\";\nimport Ball from \"./Ball\";\nimport Score from \"./Score\";\nimport SingleMode from \"./SingleMode\";\nimport { SVG_NS, KEYS, PaddleOptions, BallOptions } from \"../settings\";\n\nexport default class Game {\n  constructor(element, width, height) {\n    this.element = element;\n    this.width = width;\n    this.height = height;\n\n    // SVG container\n    this.gameElement = document.getElementById(this.element);\n    \n    // initiate the first screen of game\n    this.initPlayer1 = new Init(\n      this.width, \n      this.height, \n      (this.width / 2)- 100, \n      (this.height / 2) + 8, \n      '> Single',\n    );\n    this.initPlayer2 = new Init(\n      this.width, \n      this.height, \n      (this.width / 2)+ 100, \n      (this.height / 2) + 8, \n      '> Multi',\n    );\n    this.caption = new Init(\n      this.width,\n      this.height,\n      this.width / 2,\n      this.height - 20,\n      'Press <- or -> to select the mode',\n      12\n    );\n\n    // create the board and net with same size of the SVG container\n    this.board = new Board(this.width, this.height);\n    this.net = new Net(this.width, this.height);\n\n    // create single-play mode notice\n    this.singlePlay = new SingleMode(this.width, this.height);\n\n    // create new paddles for the each players\n    this.player1 = new Paddle(\n      this.height,\n      PaddleOptions.paddleWidth,\n      PaddleOptions.paddleHeight,\n      PaddleOptions.boardGap,\n      ((this.height - PaddleOptions.paddleHeight) / 2),\n      PaddleOptions.player1Color,\n      KEYS.a,\n      KEYS.z,\n    );\n    this.player2 = new Paddle(\n      this.height,\n      PaddleOptions.paddleWidth,\n      PaddleOptions.paddleHeight,\n      this.width - (PaddleOptions.paddleWidth + PaddleOptions.boardGap),\n      ((this.height - PaddleOptions.paddleHeight) / 2),\n      PaddleOptions.player2Color,\n      KEYS.up,\n      KEYS.down,\n    );\n\n    // create scores for players\n    this.score1 = new Score(this.width / 2 - 40, 40, 32);\n    this.score2 = new Score(this.width / 2 + 40, 40, 32);\n\n    // create a new ball for the game\n    this.ball = {};\n    for (let i = 0; i < BallOptions.number; i++){\n      this.ball[`new_${i}`] = new Ball(\n        [i], // nth of the  ball\n        this.width, // width of the Board\n        this.height, // width of the Board\n        BallOptions.ballSize[i], // size of each balls in settings.js (Default: 8)\n        BallOptions.ballColor[i] // color of each balls in settings.js (Default: white)\n        );\n    }\n\n    // switch between first screen and game screen\n    this.showFirstScreen = true;\n\n    // keys of switches which affect gameplay\n    document.addEventListener('keydown', event => {\n      switch(event.key){\n        case KEYS.right:\n          if ( this.showFirstScreen === true ){\n            this.isMulti = !this.isMulti;\n          }\n          break;\n        case KEYS.left:\n          if ( this.showFirstScreen === true ){\n            this.isMulti = !this.isMulti;\n          }\n          break;\n        case KEYS.spaceBar:\n          this.pause = !this.pause;\n          break;\n        case KEYS.enter:\n          this.startPlay =!this.startPlay;\n          this.showFirstScreen = true; // return to the first screen\n          break;\n      }\n    });\n\n  } /* \n    // end of constructor\n    */\n  \n  render() {\n    // if pause === true, render stop\n    if ( this.pause ) { return }\n\n    // hide the first screen when game begins\n    if ( this.startPlay === true ){ \n      this.showFirstScreen = false;\n    }\n    \n    // properties for SVG tag\n    this.gameElement.innerHTML = ''; // Clear the html before appending to fix a render bug 👾\n    let svg = document.createElementNS(SVG_NS, \"svg\");\n    svg.setAttributeNS(null, \"width\", this.width);\n    svg.setAttributeNS(null, \"height\", this.height);\n    svg.setAttributeNS(null, \"viewBox\", [0, 0, this.width, this.height]);\n    this.gameElement.appendChild(svg);\n\n    // Render the board\n    this.board.render(svg);\n\n    // Render first screen contents\n    if (this.showFirstScreen === true){\n\n      this.initPlayer1.render(svg, !this.isMulti);\n      this.initPlayer2.render(svg, this.isMulti);\n      this.caption.render(svg);\n\n      document.addEventListener('keydown', this.selectMode, true);\n\n    }\n\n    // Render game contents\n    if ( this.startPlay === true ){\n\n      if ( !this.isMulti ){\n        // Play single-player mode\n        this.singlePlay.render(svg);\n      } else {\n        // Play muti-players mode\n        this.multiPlay(svg);\n      }\n      \n    }\n  } // end of render function\n\n  multiPlay(svg){\n    // Render the net\n    this.net.render(svg);\n\n    // Render the paddles\n    this.player1.render(svg);\n    this.player2.render(svg);\n\n    // Render the ball\n    for (let i = 0; i < BallOptions.number; i++){\n      this.ball[`new_${i}`].render(svg, this.player1, this.player2);\n    }\n    \n    // Update scores\n    this.score1.render(svg, this.player1.score);\n    this.score2.render(svg, this.player2.score);\n\n    // return to the first page\n    document.addEventListener('keypress', event => {\n      switch(event.key){\n        case KEYS.enter:\n          // reset positions of balls\n          for (let i = 0; i < BallOptions.number; i++){\n            this.ball[`new_${i}`].x = 0;\n            this.ball[`new_${i}`].y = 0;\n          }    \n          // reset the paddle position\n          this.player1.x = PaddleOptions.boardGap;\n          this.player1.y = ((this.height - PaddleOptions.paddleHeight) / 2);\n          this.player2.x = this.width - (PaddleOptions.paddleWidth + PaddleOptions.boardGap);\n          this.player2.y = ((this.height - PaddleOptions.paddleHeight) / 2);\n          // reset the scores\n          this.player1.score = 0;\n          this.player2.score = -1; \n          /* \n            I have no idea if I set player2's score with value 0, it returns with 1.\n            So, I set -1 to make it 0\n          */\n        break;\n      }\n    });\n  }\n}","import './styles/game.css';\nimport Game from './partials/Game';\n\n// create a game instance\nconst game = new Game('game', 512, 256);\n(function gameLoop() {\n  game.render(); //  render method calls continously in gameLoop\n  requestAnimationFrame(gameLoop);\n})();"]}