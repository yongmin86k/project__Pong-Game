{"version":3,"sources":["src/settings.js","src/partials/Init.js","src/partials/Board.js","src/partials/Net.js","src/partials/Paddle.js","src/partials/Ball.js","src/partials/Score.js","src/partials/SingleMode.js","src/partials/Winner.js","src/partials/Game.js","src/index.js"],"names":["SVG_NS","GameOptions","winningScore","intervalGameTime","displayGuideline","KEYS","right","left","a","z","up","down","spaceBar","enter","ballFast","ballSlow","ballBig","ballSmall","ballPlus","ballMinus","toggleGuideline","PaddleOptions","paddleWidth","paddleHeight","paddleMinHeight","boardGap","player1Color","player2Color","speed","force","BallOptions","number","maxBallNum","minBallNum","minSpeed","maxSpeed","ballSize","maxBallsize","minBallsize","ballColor","Init","x","y","text","textSize","animate","limit","svg","selected","color","document","createElementNS","setAttributeNS","textContent","appendChild","Board","width","height","rect","Net","line","Paddle","name","boardHeight","upKey","downKey","score","keyState","addEventListener","event","keyCode","Math","max","min","Ball","index","boardWidth","radius","direction","ping","Audio","pingSound","gameTime","collisionTime1","collisionTime2","paddlePosition1","paddlePosition2","ballSpeed","moveTo","changeSpeed","objBall","vx","vy","Object","keys","forEach","key","hitTop","hitBottom","player1","player2","yDirection","fxCollision","player","abs","recordPos","unshift","length","pop","every","pos","paddle","detectMovement","play","dePaddle","toggleGuideLine","startLineX","detectCollision","startLineY","ballGapWidth","moveWidth","moveTime","moveHeight","push","timeCollisionFirst","timeCollisionLast","timeCollisionDefault","numCollision","lineX","lineY","vectorDirectionY","ceil","i","logPlayerPosition","reset","circle","rightGoal","leftGoal","goal","wallCollision","paddleCollision","e","path","join","Score","size","SingleMode","tspan","tspan2","append","Winner","winner","score1","score2","player1_isWinner","player2_isWinner","Game","element","gameElement","getElementById","initFirstScr","board","net","singlePlay","showFirstScreen","isMulti","pause","startPlay","resetGame","rdmIndex1","floor","random","rdmIndex2","ball","displayWinner","initPlayer1","initPlayer2","caption","render","lastBall","undefined","changeSize","innerHTML","winnerIs","multiPlay","game","gameLoop","requestAnimationFrame"],"mappings":"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","file":"src.9d92bdca.js","sourceRoot":"..","sourcesContent":["export const SVG_NS  = 'http://www.w3.org/2000/svg';\n\nexport const GameOptions = {\n    winningScore: 10,\n    intervalGameTime: 30, // unit is FPS\n    displayGuideline: true,\n}\n\n// key setting for the player 1 and player 2\nexport const KEYS = {\n    right: 39,              // ▶\n    left: 37,               // ◀︎\n    a: 65,                  // a\n    z: 90,                  // z\n    up: 38,                 // ▲\n    down: 40,               // ▼\n    spaceBar: 32,           // space\n    enter: 13,              // enter\n    ballFast: 70,           // f\n    ballSlow: 86,           // v\n    ballBig: 71,            // g\n    ballSmall: 66,          // b\n    ballPlus: 72,           // h\n    ballMinus: 78,          // n\n    toggleGuideline: 82,    // r\n  }\n\n// properties of Paddle\nexport const PaddleOptions = {\n    paddleWidth : 8,\n    paddleHeight : 72,\n    paddleMinHeight : 32,\n    boardGap : 10,\n    player1Color: '#FF0000',\n    player2Color: '#00FFFF',\n    speed: 1.25,\n    force: 0.25,\n}\n\n// properties of Ball\nexport const BallOptions = {\n    number: 1,  // must be larger than 0 \n                // must be same in Game.js reset section => BallOptions.number\n    maxBallNum: 10,\n    minBallNum: 1,\n    speed: 3.5, // must be larger than 0 \n                // must be same in Game.js reset section => BallOptions.speed\n    minSpeed: 1,\n    maxSpeed: 10,\n    ballSize: [4, 10, 12, 14],\n    maxBallsize: 56,\n    minBallsize: 4, // must be larger than 0\n    ballColor: ['rgba(240,240,240,0.8)', 'rgba(37,212,255,0.6)', 'rgba(255,252,37,0.6)', 'rgba(40,255,37,0.6)']\n}","import { SVG_NS } from \"../settings\";\n\nexport default class Init {\n    constructor(x, y, text, textSize = 20){\n        this.x = x;\n        this.y = y;\n        this.text = text;\n        this.textSize = textSize;\n        this.animate = 0;\n        this.limit = 32;\n    }\n\n    render(svg, selected){\n        // flash the selected game option\n        if ( selected && this.animate < this.limit ){\n            this.color = 'white';\n        } else if ( selected && (this.animate >= this.limit && this.animate < this.limit * 2)){\n            this.color = 'transparent';\n        } else if (this.animate >= this.limit * 2) {\n            this.animate = 0;\n        } else if (!selected){\n            this.animate = 0;\n            this.color = 'grey';\n        };\n        this.animate++;\n        \n        // renders svg texts\n        let text = document.createElementNS(SVG_NS, 'text');\n\n        text.setAttributeNS(null, 'x', this.x );\n        text.setAttributeNS(null, 'y', this.y );\n        text.setAttributeNS(null, 'font-family', `'Silkscreen Web', monotype`);\n        text.setAttributeNS(null, 'font-size', this.textSize );\n        text.setAttributeNS(null, 'fill', this.color);\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n        text.setAttributeNS(null, 'cursor', 'pointer');\n        text.textContent = this.text;\n\n        svg.appendChild(text);\n    }\n}","import { SVG_NS } from \"../settings\";\n\nexport default class Board {\n    constructor(width, height) {\n      this.width = width;\n      this.height = height;\n    } // end of constructor\n    \n    render(svg) {\n      // create rect\n        let rect = document.createElementNS(SVG_NS, 'rect');\n        rect.setAttributeNS(null, 'fill', '#353535');\n        rect.setAttributeNS(null, 'width', this.width);\n        rect.setAttributeNS(null, 'height', this.height);\n\n        // append rect\n        svg.appendChild(rect);\n    }\n  }","import { SVG_NS } from \"../settings\";\nexport default class Net {\n    constructor(width, height) {\n      this.width = width;\n      this.height = height;\n    } // end of constructor\n    \n    render(svg) {\n      // create line\n        let line = document.createElementNS(SVG_NS, 'line');\n        line.setAttributeNS(null, 'x1', (this.width / 2) );\n        line.setAttributeNS(null, 'y1', 0 );\n        line.setAttributeNS(null, 'x2', (this.width / 2) );\n        line.setAttributeNS(null, 'y2', this.height );\n  \n        line.setAttributeNS(null, 'stroke', '#FFFFFF');\n        line.setAttributeNS(null, 'stroke-width', 2);\n        line.setAttributeNS(null, 'stroke-dasharray', [16, 34]);\n        line.setAttributeNS(null, 'stroke-dashoffset', 4);\n  \n        // append line\n        svg.appendChild(line);\n    }\n  }","import { SVG_NS, KEYS, PaddleOptions } from \"../settings\";\n\nexport default class Paddle {\n    constructor(name, boardHeight, width, height, x, y, force = 0, color = '#FFFFFF', upKey, downKey) {\n        this.name = name;\n        this.boardHeight = boardHeight;\n        this.width = width;\n        this.height = height;\n        this.x = x;\n        this.y = y;\n        this.speed = PaddleOptions.speed;\n        this.force = force;\n        this.score = 0;\n        this.color = color;\n        this.upKey = upKey;\n        this.downKey = downKey;\n\n        this.keyState = {}; // update which keys are pressing\n\n        document.addEventListener('keydown', event => {\n            this.keyState[event.keyCode] = true;\n        });\n        document.addEventListener('keyup', event => {\n            this.force = 0;\n            this.keyState[event.keyCode] = false;\n        });\n    } // end of constructor\n\n    up(){\n        // move the paddle up but not above the top of the board\n        const speed = this.speed + this.force;\n        this.y = Math.max( this.y - speed, 0 );\n        this.force += PaddleOptions.force;\n    }\n\n    down(){\n        // move the paddle down but not more than the bottom of the board\n        const speed = this.speed + this.force;\n        this.y = Math.min( this.y + speed, (this.boardHeight - this.height) );\n        this.force += PaddleOptions.force;\n    }\n    \n    render(svg) {\n        // smoothen movement of paddles\n        if (this.keyState[KEYS.a] && this.upKey === KEYS.a ) {\n            this.up();\n        }\n        if (this.keyState[KEYS.z] && this.downKey === KEYS.z ) {\n            this.down();\n        }\n        if (this.keyState[KEYS.up] && this.upKey === KEYS.up ) {\n            this.up();\n        }\n        if (this.keyState[KEYS.down] && this.downKey === KEYS.down ) {\n            this.down();\n        }\n\n        // create SVG of rect\n        let rect = document.createElementNS(SVG_NS, 'rect');\n        rect.setAttributeNS(null, 'fill', this.color);\n        rect.setAttributeNS(null, 'width', this.width);\n        rect.setAttributeNS(null, 'height', this.height);\n        rect.setAttributeNS(null, 'x', this.x);\n        rect.setAttributeNS(null, 'y', this.y);\n\n        // append SVG\n        svg.appendChild(rect);\n    }\n}\n\n","import { SVG_NS, KEYS, PaddleOptions, BallOptions, GameOptions } from \"../settings\";\nimport pingSound from \"../../public/sounds/pong-01.wav\";\n\nexport default class Ball {\n    constructor(index, boardWidth, boardHeight, radius = 8, color = '#FFFFFF') {\n      this.index = index;\n      this.boardWidth = boardWidth;\n      this.boardHeight = boardHeight;\n      this.radius = radius;\n      this.color = color;\n      this.direction = 1;\n\n      this.ping = new Audio(pingSound);\n\n      this.gameTime = 0; // Time for game play in FPS\n      this.collisionTime1 = 0;\n      this.collisionTime2 = 0;\n\n      this.paddlePosition1 = [];\n      this.paddlePosition2 = [];\n\n      this.ballSpeed = 0.3; // Speed increment every time hits the paddle\n\n      this.moveTo = {};\n\n      // this.reset();\n      this.changeSpeed();\n      \n    } // end of constructor\n\n    reset(objBall){\n      this.x = this.boardWidth / 2;\n      this.y = this.boardHeight / 2;\n      this.vx = 0;\n      this.vy = 0;\n\n      this.vx = this.direction * BallOptions.speed;\n      this.vy = 0;\n\n      // Reset the guidelines for each balls\n      Object.keys(objBall).forEach(key => {\n        this.moveTo[key] = {};\n        this.moveTo[key]['m'] = '';\n        this.moveTo[key]['l'] = [];\n      });\n      // this.moveTo['m'] = '';\n      // this.moveTo['l'] = [];\n      \n      // Reset the time when either player scores\n      if (this.gameTime >= GameOptions.intervalGameTime ){ \n        this.gameTime = 0;\n        this.collisionTime1 = 0;\n        this.collisionTime2 = 0;\n       }\n    }\n\n    wallCollision(){\n      const hitTop = this.y - this.radius < 0;\n      const hitBottom = this.y + this.radius > this.boardHeight;\n      if (hitTop || hitBottom ){ this.vy *= -1; }\n    }\n\n    paddleCollision(player1, player2, objBall) {\n      if (this.vx > 0) { // moving right\n        // collision detection for player2\n        if ((this.x + this.radius >= player2.x && this.x - this.radius <= player2.x + player2.width) &&\n          (this.y >= player2.y && this.y <= player2.y + player2.height)){\n            // add spins to the ball in response to the direction of a paddle\n            let yDirection;\n            if ( player2.keyState[38] ){ yDirection = -1; } \n            else if ( player2.keyState[40] ){ yDirection = 1; } \n            else { yDirection = 0; }\n\n            this.fxCollision(yDirection, player2, objBall);\n\n        }\n      } else { // moving left\n        // collision detection for player1\n        if ((this.x + this.radius >= player1.x && this.x - this.radius <= player1.x + player1.width) &&\n          (this.y >= player1.y && this.y <= player1.y + player1.height)){\n            let yDirection;\n            if ( player1.keyState[65] ){ yDirection = -1; } \n            else if ( player1.keyState[90] ){ yDirection = 1; } \n            else { yDirection = 0; }\n\n            this.fxCollision(yDirection, player1, objBall);\n            \n          }\n      }\n      \n      // changes paddle color\n      if (this.gameTime < this.collisionTime1){\n        player1.color = 'white';\n      } else {\n        player1.color = PaddleOptions.player1Color;\n      }\n\n      if (this.gameTime < this.collisionTime2){\n        player2.color = 'white';\n      } else {\n        player2.color = PaddleOptions.player2Color;\n      }\n      \n    } // end of paddleCollision()\n    \n    goal(player) {\n      player.score++;\n    }\n\n    // change the speed of balls\n    changeSpeed(){\n      document.addEventListener('keydown', event => {\n        switch(event.keyCode){\n          case KEYS.ballFast:\n              if ( this.vx > 0){ \n                this.vx = Math.min(this.vx + 1, BallOptions.maxSpeed);\n              } else { \n                this.vx = Math.max((Math.abs(this.vx) + 1) * -1, -BallOptions.maxSpeed);\n              }\n            break;\n          case KEYS.ballSlow:\n              if ( this.vx > 0){ \n                this.vx = Math.max(this.vx - 1, BallOptions.minSpeed);\n              } else { \n                this.vx = Math.min((Math.abs(this.vx) - 1) * -1, -BallOptions.minSpeed);\n              }\n            break;\n        }\n\n      });\n    }\n\n    logPlayerPosition(player, recordPos){\n      recordPos.unshift(player.y);\n      if (recordPos.length > 3){ recordPos.pop(); }\n    }\n    \n    detectMovement(player, recordPos){\n      const notMoved = recordPos.every(pos=> pos === recordPos[0])\n      if (notMoved){ player.force = 0; }\n    }\n\n    // decrease the size of opponent's paddle\n    dePaddle(paddle){\n      return Math.max(paddle - 8, PaddleOptions.paddleMinHeight);\n    }\n\n    // functions of paddle collision\n    fxCollision(direction, player, objBall){ \n      // reset the guideline\n      Object.keys(objBall).forEach(key => {\n        if ( this.moveTo[key] ) {\n          this.moveTo[key]['l'] = [];\n        }\n      });\n      \n      // speed up\n      if (player.name === 'player1'){\n        // detect paddle movement\n        // if not moved, return force = 0\n        this.detectMovement(player, this.paddlePosition1);\n        this.vx = Math.min(Math.abs(this.vx) + this.ballSpeed, BallOptions.maxSpeed);\n        \n        // assign collisionTime for player\n        this.collisionTime1 = this.gameTime + 10;\n      \n      } else {\n        this.detectMovement(player, this.paddlePosition2);\n        this.vx = Math.min(Math.abs(this.vx + this.ballSpeed), BallOptions.maxSpeed) * -1;\n\n        this.collisionTime2 = this.gameTime + 10;\n      } //* end if\n\n      // adjust  angles and power to the ball\n      this.vy += (direction * player.force) / 2;\n\n      // play the sound when paddle hits the ball\n      this.ping.play(); \n\n      // decrease size of the player's paddle \n      player.height = this.dePaddle(player.height);\n\n      this.toggleGuideLine(objBall)\n      \n    } // end fxCollision();\n\n    // toggle the guideline of the ball direction\n    toggleGuideLine(objBall){\n\n      Object.keys(objBall).forEach(key => {\n        let startLineX = objBall[key].x,\n            startLineY = objBall[key].y,\n            ballGapWidth = this.radius + PaddleOptions.paddleWidth + PaddleOptions.boardGap,\n            moveWidth = this.boardWidth - (2  * ballGapWidth),\n            moveTime = Math.abs(moveWidth / this.vx),\n            moveHeight = startLineY + (this.vy * moveTime),\n            detectCollision;\n\n        // fix error when playing with  multi balls\n        if ( startLineX <= ballGapWidth || startLineX >= this.boardWidth - ballGapWidth ){\n\n          // Detect Collision\n          if (\n            (moveHeight < 0 + this.radius ) ||\n            (moveHeight > this.boardHeight - this.radius )\n            ) { detectCollision = true; } \n            else { detectCollision = false;}\n            \n            // Start coordinates of the guideline\n            if ( this.moveTo[key] ) {\n              this.moveTo[key]['m'] = `M${startLineX} ${startLineY}`;\n            }\n            \n            if ( detectCollision === false && this.vx < 0 ){\n              // Move left without collisions\n              if ( this.moveTo[key] ) {\n                this.moveTo[key]['l'].push(`L${ballGapWidth} ${moveHeight}`);\n              }\n            } else if ( detectCollision === false && this.vx > 0 ){\n              // Move right without collisions\n              if ( this.moveTo[key] ) {\n                this.moveTo[key]['l'].push(`L${this.boardWidth - ballGapWidth} ${moveHeight}`);\n              }\n            } else {\n              // with collisions\n              let timeCollisionFirst,\n                  timeCollisionLast,\n                  timeCollisionDefault,\n                  numCollision,\n                  lineX, lineY,\n                  vectorDirectionY = 1;\n                \n                if ( this.vy < 0){\n                  // Move up\n                  timeCollisionFirst = Math.abs((this.radius - startLineY) / this.vy);\n                } else {\n                  // Move down\n                  timeCollisionFirst = Math.abs((this.boardHeight - this.radius - startLineY) / this.vy);\n                }\n                timeCollisionDefault = Math.abs((this.boardHeight - (2 * this.radius)) / this.vy);\n                timeCollisionLast = (moveTime - timeCollisionFirst) % timeCollisionDefault;\n                numCollision = Math.ceil((moveTime - timeCollisionFirst) / timeCollisionDefault);\n    \n                if ( this.moveTo[key] ) {\n                  for ( let i=0; i < numCollision + 1; i++){\n                    switch (i){\n                      // first collision coordinates\n                      case 0 : \n                        lineX = startLineX + (this.vx * timeCollisionFirst);\n                        lineY = startLineY + (this.vy * timeCollisionFirst);\n                        // this.moveTo['l'].push(`L${ lineX } ${ lineY }`);\n                        this.moveTo[key]['l'].push(`L${ lineX } ${ lineY }`);\n                        break;\n      \n                      // last collision coordinates\n                      case numCollision :\n                        vectorDirectionY *= -1;\n                        lineX = this.vx < 0 ? ballGapWidth : this.boardWidth - ballGapWidth;\n                        lineY = Math.min( lineY + ( vectorDirectionY * timeCollisionLast * this.vy ), this.boardHeight - ( 2 * this.radius) )\n                        // this.moveTo['l'].push(`L${ lineX } ${ lineY }`);\n                        this.moveTo[key]['l'].push(`L${ lineX } ${ lineY }`);\n                        break;\n      \n                      default :\n                        vectorDirectionY *= -1;\n                        lineX = lineX + (timeCollisionDefault * this.vx);\n                        lineY = Math.min( lineY + ( vectorDirectionY * timeCollisionDefault * this.vy ), this.boardHeight - ( 2 * this.radius) )\n                        // this.moveTo['l'].push(`L${ lineX } ${ lineY }`);\n                        this.moveTo[key]['l'].push(`L${ lineX } ${ lineY }`);\n                    } // end switch\n                  } // end forLoop\n                } // end if a ball exists\n            } // end if ball movements\n        } // end if fix bug for multi balls\n      }); // end Object forEach\n    } // end toggleGuideLine()\n\n    render(svg, player1, player2, objBall){\n      this.gameTime++;\n      this.logPlayerPosition(player1, this.paddlePosition1);\n      this.logPlayerPosition(player2, this.paddlePosition2);\n      \n      // initiate the ball moving after intervalGameTime(settings.js)\n      if (this.gameTime < GameOptions.intervalGameTime){\n        this.reset(objBall);\n      } else {\n        this.x += this.vx;\n        if ( this.vy < 0){\n          this.y = Math.max( this.y + this.vy, this.radius-1);\n        } else {\n          this.y = Math.min( this.y + this.vy, this.boardHeight-this.radius+1);\n        }\n      } \n      // create a ball\n      let circle = document.createElementNS(SVG_NS, 'circle');\n        circle.setAttributeNS(null, 'r', this.radius);\n        circle.setAttributeNS(null, 'fill', this.color);\n        circle.setAttributeNS(null, 'cx', this.x);\n        circle.setAttributeNS(null, 'cy', this.y);\n\n        svg.appendChild(circle);\n      \n      // change ball direction when a player scores\n      const rightGoal = this.x + this.radius >= this.boardWidth;\n      const leftGoal = this.x - this.radius <= 0;\n      \n      if ( rightGoal ) {\n        this.direction = 1;\n        this.goal(player1);\n      } else if ( leftGoal ){\n        this.direction = -1;\n        this.goal(player2);\n      }\n      if (rightGoal || leftGoal){\n        this.reset(objBall);\n\n        // reset the position of paddles only the number of balls is greater than 1\n        if ( Object.keys(objBall).length === 1){\n          player1.y = ((this.boardHeight - PaddleOptions.paddleHeight) / 2);\n          player1.height = PaddleOptions.paddleHeight;\n\n          player2.y = ((this.boardHeight - PaddleOptions.paddleHeight) / 2);\n          player2.height = PaddleOptions.paddleHeight;\n        }\n      }\n    \n      // bounce when the ball hits the walls\n      this.wallCollision(this.gameTime);\n      \n      // reflect when the ball hits the paddle\n      this.paddleCollision(player1, player2, objBall);\n\n      // toggle guidelines with the key\n      document.addEventListener('keydown', e => {\n        if (e.keyCode === KEYS.toggleGuideline){\n          GameOptions.displayGuideline = !GameOptions.displayGuideline;\n        };\n      });\n\n      // render guidelines\n      \n      if (GameOptions.displayGuideline === true){\n        Object.keys(objBall).forEach(key => {\n          if ( this.moveTo[key] ){\n            let path = document.createElementNS(SVG_NS, 'path');\n            path.setAttributeNS(null, 'd', `${this.moveTo[key]['m']} ${this.moveTo[key]['l'].join(' ')}`);\n            path.setAttributeNS(null, 'fill', 'none');\n            path.setAttributeNS(null, 'stroke', 'rgba(255, 255, 255, 0.3)');\n            path.setAttributeNS(null, 'stroke-width', 2);\n            path.setAttributeNS(null, 'stroke-dasharray', [2, 8]);\n            svg.appendChild(path);\n          }\n        });\n      }\n\n    } // end of render()\n}","import { SVG_NS } from \"../settings\";\nexport default class Score {\n    constructor(x, y = 40, size = 32) {\n      this.x = x;\n      this.y = y;\n      this.size = size;\n    }\n    \n    render(svg, score) {\n        let text = document.createElementNS(SVG_NS, 'text');\n        text.setAttributeNS(null, 'x', this.x );\n        text.setAttributeNS(null, 'y', this.y );\n        text.setAttributeNS(null, 'font-family', `'Silkscreen Web', monotype`);\n        text.setAttributeNS(null, 'font-size', this.size );\n        text.setAttributeNS(null, 'fill', '#FFFFFF');\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n\n        text.textContent = score;\n\n        svg.appendChild(text);\n    }\n  }","import { SVG_NS, KEYS } from \"../settings\";\n\nexport default class SingleMode {\n    constructor(boardWidth, boardHeight){\n        this.x = boardWidth / 2;\n        this.y = (boardHeight / 2) - 40;\n        this.animate = 0;\n        this.limit = 16;\n    }\n\n    render(svg){\n        let text = document.createElementNS(SVG_NS, 'text');\n        let tspan = document.createElementNS(SVG_NS, 'tspan');\n        let tspan2 = document.createElementNS(SVG_NS, 'tspan');\n        text.setAttributeNS(null, 'x', this.x);\n        text.setAttributeNS(null, 'y', this.y);\n        text.setAttributeNS(null, 'fill', '#FFFFFF');\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n        text.setAttributeNS(null, 'fill', '#FFFFFF');\n        text.setAttributeNS(null, 'font-family', `'Silkscreen Web', monotype`);\n        text.setAttributeNS(null, 'font-size', 32 );\n\n        tspan.setAttributeNS(null, 'x', this.x);\n        tspan.setAttributeNS(null, 'y', this.y + 32);\n        tspan.setAttributeNS(null, 'font-size', 20 );\n\n        tspan2.setAttributeNS(null, 'x', this.x);\n        tspan2.setAttributeNS(null, 'y', this.y + 140);\n        tspan2.setAttributeNS(null, 'font-size', 16 );\n        tspan2.setAttributeNS(null, 'fill', 'transparent');\n        // flash the return text \n        if ( this.animate < this.limit ){\n            tspan2.setAttributeNS(null, 'fill', 'transparent');\n        } else if ( this.animate >= this.limit && this.animate < this.limit * 2 ){\n            tspan2.setAttributeNS(null, 'fill', '#70B2B1');\n        } else if ( this.animate >= this.limit * 2 && this.animate < this.limit * 3 ){\n            tspan2.setAttributeNS(null, 'fill', '#26601F');\n        } else if ( this.animate >= this.limit * 3 && this.animate < this.limit * 4 ){\n            tspan2.setAttributeNS(null, 'fill', '#70B2B1');\n        } else if (this.animate >= this.limit * 4 ) {\n            this.animate = 0;\n        }\n        this.animate++;\n        \n        text.textContent = 'Sorry';\n        tspan.textContent = 'Signle mode is not available';\n        tspan2.textContent = 'Press <Enter> to go back';\n        \n        svg.append(text);\n        text.append(tspan, tspan2);\n    }\n}","import { SVG_NS, GameOptions } from \"../settings\";\n\n// method to define who is the winner\nexport default class Winner {\n    constructor( boardWidth ){\n        this.x = boardWidth / 2;\n        this.animate = 0;\n        this.limit = 16;\n    }\n\n    render(svg, winner){\n        let text = document.createElementNS(SVG_NS, 'text');\n        let tspan = document.createElementNS(SVG_NS, 'tspan');\n        let tspan2 = document.createElementNS(SVG_NS, 'tspan');\n        let y = 120;\n        text.setAttributeNS(null, 'x', this.x );\n        text.setAttributeNS(null, 'y', y );\n        text.setAttributeNS(null, 'font-family', `'Silkscreen Web', monotype`);\n        text.setAttributeNS(null, 'font-size', 24 );\n        text.setAttributeNS(null, 'fill', '#FFFFFF');\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n\n        tspan.setAttributeNS(null, 'x', this.x );\n        tspan.setAttributeNS(null, 'y', y + 40);\n        tspan.setAttributeNS(null, 'text-anchor', 'middle');\n        tspan.setAttributeNS(null, 'fill', 'transparent');\n        // flash the return text \n        if ( this.animate < this.limit ){\n            tspan.setAttributeNS(null, 'fill', 'transparent');\n        } else if ( this.animate >= this.limit && this.animate < this.limit * 2 ){\n            tspan.setAttributeNS(null, 'fill', '#70B2B1');\n        } else if ( this.animate >= this.limit * 2 && this.animate < this.limit * 3 ){\n            tspan.setAttributeNS(null, 'fill', '#26601F');\n        } else if ( this.animate >= this.limit * 3 && this.animate < this.limit * 4 ){\n            tspan.setAttributeNS(null, 'fill', '#70B2B1');\n        } else if (this.animate >= this.limit * 4 ) {\n            this.animate = 0;\n        }\n        this.animate++;\n\n        tspan2.setAttributeNS(null, 'x', this.x );\n        tspan2.setAttributeNS(null, 'y', y + 116 );\n        tspan2.setAttributeNS(null, 'text-anchor', 'middle');\n        tspan2.setAttributeNS(null, 'fill', 'grey');\n        tspan2.setAttributeNS(null, 'font-size', 12 );\n        \n        text.textContent = `The winner is `;\n        tspan.textContent = winner;\n        tspan2.textContent = 'Press <Enter> to return';\n\n        svg.appendChild(text);\n        text.appendChild(tspan);\n        text.appendChild(tspan2);\n    }\n\n    winnerIs(score1, score2){ \n        const player1_isWinner = score1 >= GameOptions.winningScore;\n        const player2_isWinner = score2 >= GameOptions.winningScore;\n\n        if ( player1_isWinner ){\n            return this.winner = 'player 1';\n        } else if ( player2_isWinner ){\n            return this.winner = 'player 2';\n        }\n    }\n}","import Init from \"./Init\";\nimport Board from \"./Board\";\nimport Net from \"./Net\";\nimport Paddle from \"./Paddle\";\nimport Ball from \"./Ball\";\nimport Score from \"./Score\";\nimport SingleMode from \"./SingleMode\";\nimport Winner from \"./Winner\";\nimport { SVG_NS, KEYS, PaddleOptions, BallOptions } from \"../settings\";\n\nexport default class Game {\n  constructor(element, width, height) {\n    this.element = element;\n    this.width = width;\n    this.height = height;\n    \n    // SVG container\n    this.gameElement = document.getElementById(this.element);\n    \n    // initiate the first screen of game\n    this.initFirstScr();\n\n    // create the board and net with same size of the SVG container\n    this.board = new Board(this.width, this.height);\n    this.net = new Net(this.width, this.height);\n\n    // create single-play mode notice\n    this.singlePlay = new SingleMode(this.width, this.height);\n\n    // create new paddles for the each players\n    this.player1 = new Paddle(\n      'player1',\n      this.height,\n      PaddleOptions.paddleWidth,\n      PaddleOptions.paddleHeight,\n      PaddleOptions.boardGap,\n      ((this.height - PaddleOptions.paddleHeight) / 2),\n      0,\n      PaddleOptions.player1Color,\n      KEYS.a,\n      KEYS.z,\n    );\n    this.player2 = new Paddle(\n      'player2',\n      this.height,\n      PaddleOptions.paddleWidth,\n      PaddleOptions.paddleHeight,\n      this.width - (PaddleOptions.paddleWidth + PaddleOptions.boardGap),\n      ((this.height - PaddleOptions.paddleHeight) / 2),\n      0,\n      PaddleOptions.player2Color,\n      KEYS.up,\n      KEYS.down,\n    );\n\n    // create scores for players\n    this.score1 = new Score(this.width / 2 - 40, 40, 32);\n    this.score2 = new Score(this.width / 2 + 40, 40, 32);\n\n    // switch between first screen and game screen\n    this.showFirstScreen = true;\n    \n    // keys of switches which affect gameplay\n    document.addEventListener('keydown', event => {\n      switch(event.keyCode){\n        case KEYS.right:\n          if ( this.showFirstScreen === true ){\n            this.isMulti = !this.isMulti;\n          }\n          break;\n        case KEYS.left:\n          if ( this.showFirstScreen === true ){\n            this.isMulti = !this.isMulti;\n          }\n          break;\n        case KEYS.spaceBar:\n          this.pause = !this.pause;\n          break;\n        case KEYS.enter:\n          this.startPlay =!this.startPlay;\n          this.showFirstScreen = true; // return to the first screen\n          // reset the game properties\n          this.resetGame();\n          break;\n          \n        // change the number of balls\n        case KEYS.ballPlus:\n          if (this.isMulti){\n            BallOptions.number = Math.min(BallOptions.number + 1, BallOptions.maxBallNum);\n          \n            let index = BallOptions.number -1;\n            let rdmIndex1 = Math.floor(Math.random() * 4);\n            let rdmIndex2 = Math.floor(Math.random() * 4);\n            \n            this.ball[`new_${index}`] = new Ball(\n              [index],\n              this.width,\n              this.height,\n              BallOptions.ballSize[rdmIndex1],\n              BallOptions.ballColor[rdmIndex2]\n            );\n            break;\n          }\n        case KEYS.ballMinus:\n          if (this.isMulti){\n            if (BallOptions.number > 1){\n              BallOptions.number = Math.max(BallOptions.number - 1, BallOptions.minBallNum);\n              let index = BallOptions.number;\n              delete this.ball[`new_${index}`];\n            }\n          }\n          break;\n      }\n    }); // end of keypress Event\n\n    // new Object and instance for the winner\n    this.winner;\n    this.displayWinner = new Winner(this.width);\n\n  } /* \n    // end of constructor\n    */\n\n  initFirstScr(){\n    this.initPlayer1 = new Init(\n      (this.width / 2) - 100, \n      (this.height / 2) + 8, \n      '> Single',\n    );\n    this.initPlayer2 = new Init(\n      (this.width / 2) + 100, \n      (this.height / 2) + 8, \n      '> Multi',\n    );\n    this.caption = new Init(\n      this.width / 2,\n      this.height - 20,\n      'Press <- or -> to select the mode and hit <Enter>',\n      12\n    );\n  }\n  \n  multiPlay(svg){\n    // Render the net\n    this.net.render(svg);\n    \n    // Render the paddles\n    this.player1.render(svg);\n    this.player2.render(svg);\n    \n    // Render the ball\n    let i = 0;\n    for (i; i < BallOptions.number; i++){\n      this.ball[`new_${i}`].render(svg, this.player1, this.player2, this.ball);\n    }\n\n    // Update scores\n    this.score1.render(svg, this.player1.score);\n    this.score2.render(svg, this.player2.score);\n\n    let lastBall = `new_${i - 1}`;\n    if (this.ballSize[KEYS.ballBig]) {\n      this.ballBig(this.ball[lastBall]);\n    }\n    if (this.ballSize[KEYS.ballSmall]){\n      this.ballSmall(this.ball[lastBall]);\n    }\n  } // end of multiPlay()\n\n  // change the size of balls\n  changeSize(){\n    document.addEventListener('keydown', event => {\n      this.ballSize[event.keyCode] = true;\n    });\n    document.addEventListener('keyup', event => {\n      this.ballSize[event.keyCode] = false;\n    })\n  }\n  ballBig(ball){\n    ball.radius = Math.min( ball.radius + 2, BallOptions.maxBallsize );\n  }\n  ballSmall(ball){\n    ball.radius = Math.max( ball.radius - 2, BallOptions.minBallsize );\n  }\n\n  resetGame(){\n    // reset number of balls\n    BallOptions.number = 1;\n    // create a new ball for the game\n    this.ball = {};\n    for (let i = 0; i < BallOptions.number; i++){\n      this.ball[`new_${i}`] = new Ball(\n        [i], // nth of the  ball\n        this.width, // width of the Board\n        this.height, // width of the Board\n        BallOptions.ballSize[i], // size of each balls in settings.js (Default: 8)\n        BallOptions.ballColor[i] // color of each balls in settings.js (Default: white)\n        );\n    }   \n    // reset speed of balls\n    BallOptions.speed = 3.5;\n    \n    // reset the winner\n      this.winner = undefined;   \n    // the paddle properties\n    this.player1.x = PaddleOptions.boardGap;\n    this.player1.y = ((this.height - PaddleOptions.paddleHeight) / 2);\n    this.player1.height = PaddleOptions.paddleHeight;\n    this.player2.x = this.width - (PaddleOptions.paddleWidth + PaddleOptions.boardGap);\n    this.player2.y = ((this.height - PaddleOptions.paddleHeight) / 2);\n    this.player2.height = PaddleOptions.paddleHeight;\n    // the scores\n    this.player1.score = 0;\n    this.player2.score = 0; \n    \n    this.ballSize = {};\n    this.changeSize();\n    \n  } // end of resetGame()\n\n  render() {\n    // if pause === true, render stop\n    if ( this.pause ) { return }\n    \n    // hide the first screen when game begins\n    if ( this.startPlay === true ){ this.showFirstScreen = false; }\n    \n    // properties for SVG tag\n    this.gameElement.innerHTML = ''; // Clear the html before appending to fix a render bug 👾\n    let svg = document.createElementNS(SVG_NS, \"svg\");\n    svg.setAttributeNS(null, \"width\", this.width);\n    svg.setAttributeNS(null, \"height\", this.height);\n    svg.setAttributeNS(null, \"viewBox\", [0, 0, this.width, this.height]);\n    this.gameElement.appendChild(svg);\n\n    // Render the board\n    this.board.render(svg);\n    \n    // Render first screen contents\n    if (this.showFirstScreen === true){\n      this.initPlayer1.render(svg, !this.isMulti);\n      this.initPlayer2.render(svg, this.isMulti);\n      this.caption.render(svg);\n    }\n    \n    // Assign who is the winner\n    this.winner = this.displayWinner.winnerIs(this.player1.score, this.player2.score);\n  \n    // Display the winner of the game\n    if ( this.winner ) {\n      this.displayWinner.render(svg, this.winner);\n      return\n    }\n    \n    // Render game contents\n    if ( this.startPlay === true ){\n      // Play single-player mode\n      if ( !this.isMulti ){ this.singlePlay.render(svg); }\n      // Play muti-players mode\n      else { \n        this.multiPlay(svg);\n       }\n    }\n  } // end of render()\n}","import './styles/game.css';\nimport Game from './partials/Game';\n\n// create a game instance\nconst game = new Game('game', 512, 256);\n(function gameLoop() {\n  game.render(); //  render method calls continously in gameLoop\n  requestAnimationFrame(gameLoop);\n})();"]}