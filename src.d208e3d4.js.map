{"version":3,"sources":["src/settings.js","src/partials/Init.js","src/partials/Board.js","src/partials/Net.js","src/partials/Paddle.js","src/partials/Ball.js","src/partials/Score.js","src/partials/SingleMode.js","src/partials/Winner.js","src/partials/Game.js","src/index.js"],"names":["SVG_NS","GameOptions","winningScore","intervalGameTime","KEYS","right","left","a","z","up","down","spaceBar","enter","ballFast","ballSlow","PaddleOptions","paddleWidth","paddleHeight","boardGap","player1Color","player2Color","speed","BallOptions","number","minSpeed","maxSpeed","ballSize","ballColor","Init","x","y","text","textSize","animate","limit","svg","selected","color","document","createElementNS","setAttributeNS","textContent","appendChild","Board","width","height","rect","Net","line","Paddle","boardHeight","upKey","downKey","score","keyState","addEventListener","event","key","Math","max","min","Ball","index","boardWidth","radius","direction","ping","Audio","pingSound","gameTime","reset","changeSpeed","vx","vy","upOrDown","round","random","hitTop","hitBottom","player1","player2","play","player","abs","circle","rightGoal","leftGoal","goal","wallCollision","paddleCollision","Score","size","SingleMode","tspan","tspan2","append","Winner","winner","score1","score2","player1_isWinner","player2_isWinner","Game","element","gameElement","getElementById","initPlayer1","initPlayer2","caption","board","net","singlePlay","ball","i","showFirstScreen","isMulti","pause","startPlay","displayWinner","render","undefined","innerHTML","resetGame","winnerIs","multiPlay","game","gameLoop","requestAnimationFrame"],"mappings":"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","file":"src.d208e3d4.js","sourceRoot":"..","sourcesContent":["export const SVG_NS  = 'http://www.w3.org/2000/svg';\n\nexport const GameOptions = {\n    winningScore: 10,\n    intervalGameTime: 50,\n}\n\n// key setting for the player 1 and player 2\nexport const KEYS = {\n    right: 'ArrowRight',\n    left: 'ArrowLeft',\n    a: 'a',        // player 1 up key\n    z: 'z',        // player 1 down key\n    up: 'ArrowUp',       // player 2 up key\n    down: 'ArrowDown',     // player 2 down key\n    spaceBar: ' ', // we'll use this later...\n    enter: 'Enter',\n    ballFast: 'f',\n    ballSlow: 'v'\n  }\n\n// properties of Paddle\nexport const PaddleOptions = {\n    paddleWidth : 8,\n    paddleHeight : 56,\n    boardGap : 10,\n    player1Color: '#FF0000',\n    player2Color: '#00FFFF',\n    speed: 10,\n}\n\n// properties of Ball\nexport const BallOptions = {\n    number: 1,\n    speed: 3, // must be larger than 0\n    minSpeed: 1,\n    maxSpeed: 10,\n    ballSize: [8, 12, 16, 24],\n    ballColor: ['pink', 'cyan', 'yellow', 'yellowgreen']\n}","import { SVG_NS } from \"../settings\";\n\nexport default class Init {\n    constructor(x, y, text, textSize = 20){\n        this.x = x;\n        this.y = y;\n        this.text = text;\n        this.textSize = textSize;\n        this.animate = 0;\n        this.limit = 32;\n    }\n\n    render(svg, selected){\n        // flash the selected game option\n        if ( selected && this.animate < this.limit ){\n            this.color = 'white';\n        } else if ( selected && (this.animate >= this.limit && this.animate < this.limit * 2)){\n            this.color = 'transparent';\n        } else if (this.animate >= this.limit * 2) {\n            this.animate = 0;\n        } else if (!selected){\n            this.animate = 0;\n            this.color = 'grey';\n        };\n        this.animate++;\n        \n        // renders svg texts\n        let text = document.createElementNS(SVG_NS, 'text');\n\n        text.setAttributeNS(null, 'x', this.x );\n        text.setAttributeNS(null, 'y', this.y );\n        text.setAttributeNS(null, 'font-family', `'Silkscreen Web', monotype`);\n        text.setAttributeNS(null, 'font-size', this.textSize );\n        text.setAttributeNS(null, 'fill', this.color);\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n        text.setAttributeNS(null, 'cursor', 'pointer');\n        text.textContent = this.text;\n\n        svg.appendChild(text);\n    }\n}","import { SVG_NS } from \"../settings\";\n\nexport default class Board {\n    constructor(width, height) {\n      this.width = width;\n      this.height = height;\n    } // end of constructor\n    \n    render(svg) {\n      // create rect\n        let rect = document.createElementNS(SVG_NS, 'rect');\n        rect.setAttributeNS(null, 'fill', '#353535');\n        rect.setAttributeNS(null, 'width', this.width);\n        rect.setAttributeNS(null, 'height', this.height);\n\n        // append rect\n        svg.appendChild(rect);\n    }\n  }","import { SVG_NS } from \"../settings\";\nexport default class Net {\n    constructor(width, height) {\n      this.width = width;\n      this.height = height;\n    } // end of constructor\n    \n    render(svg) {\n      // create line\n        let line = document.createElementNS(SVG_NS, 'line');\n        line.setAttributeNS(null, 'x1', (this.width / 2) );\n        line.setAttributeNS(null, 'y1', 0 );\n        line.setAttributeNS(null, 'x2', (this.width / 2) );\n        line.setAttributeNS(null, 'y2', this.height );\n  \n        line.setAttributeNS(null, 'stroke', '#FFFFFF');\n        line.setAttributeNS(null, 'stroke-width', 2);\n        line.setAttributeNS(null, 'stroke-dasharray', [16, 34]);\n        line.setAttributeNS(null, 'stroke-dashoffset', 4);\n  \n        // append line\n        svg.appendChild(line);\n    }\n  }","import { SVG_NS, KEYS, PaddleOptions } from \"../settings\";\n\nexport default class Paddle {\n    constructor(boardHeight, width, height, x, y, color = '#FFFFFF', upKey, downKey) {\n        this.boardHeight = boardHeight;\n        this.width = width;\n        this.height = height;\n        this.x = x;\n        this.y = y;\n        this.speed = PaddleOptions.speed;\n        this.score = 0;\n        this.color = color;\n        this.upKey = upKey;\n        this.downKey = downKey;\n\n        this.keyState = {}; // update which keys are pressing\n\n        document.addEventListener('keydown', event => {\n            this.keyState[event.key] = true;\n        });\n        document.addEventListener('keyup', event => {\n            this.keyState[event.key] = false;\n        });\n    } // end of constructor\n\n    up(){\n        // move the paddle up but not above the top of the board\n        this.y = Math.max( this.y - this.speed, 0 );\n    }\n\n    down(){\n        // move the paddle down but not more than the bottom of the board\n        this.y = Math.min( this.y + this.speed, (this.boardHeight - this.height) );\n    }\n    \n    render(svg) {\n        // smoothen movement of paddles\n        if (this.keyState[KEYS.a] && this.upKey === KEYS.a ) {\n            this.up();\n        }\n        if (this.keyState[KEYS.z] && this.downKey === KEYS.z ) {\n            this.down();\n        }\n        if (this.keyState[KEYS.up] && this.upKey === KEYS.up ) {\n            this.up();\n        }\n        if (this.keyState[KEYS.down] && this.downKey === KEYS.down ) {\n            this.down();\n        }\n\n        // create SVG of rect\n        let rect = document.createElementNS(SVG_NS, 'rect');\n        rect.setAttributeNS(null, 'fill', this.color);\n        rect.setAttributeNS(null, 'width', this.width);\n        rect.setAttributeNS(null, 'height', this.height);\n        rect.setAttributeNS(null, 'x', this.x);\n        rect.setAttributeNS(null, 'y', this.y);\n\n        // append SVG\n        svg.appendChild(rect);\n    }\n}\n\n","import { SVG_NS, KEYS, BallOptions, GameOptions } from \"../settings\";\nimport pingSound from \"../../public/sounds/pong-01.wav\";\n\nexport default class Ball {\n    constructor(index, boardWidth, boardHeight, radius = 8, color = '#FFFFFF') {\n      this.index = index;\n      this.boardWidth = boardWidth;\n      this.boardHeight = boardHeight;\n      this.radius = radius;\n      this.color = color;\n      this.direction = 1;\n\n      this.ping = new Audio(pingSound);\n\n      this.gameTime = 0; // Time for game play in FPS\n\n      this.reset();\n      this.changeSpeed();\n\n    } // end of constructor\n\n    reset(){\n      this.x = this.boardWidth / 2;\n      this.y = this.boardHeight / 2;\n      this.vx = 0;\n      this.vy = 0;\n\n      // Randomize ball direction of going up or down\n      this.upOrDown = Math.round(Math.random() * 10) <= 5 ? 1 : -1;\n      this.vx = this.direction * BallOptions.speed;\n      this.vy = this.upOrDown * BallOptions.speed;\n        // console.log( `ball number: ${Number(this.index) + 1} | size: ${this.radius} | color: ${this.color} | speed: ${ Math.ceil( Math.abs(this.vx) + Math.abs(this.vy) ) / 2}`);\n      \n      // Reset the time when either player scores\n      if (this.gameTime >= GameOptions.intervalGameTime ){ this.gameTime = 0; }\n    }\n\n    wallCollision(){\n      const hitTop = this.y - this.radius <= 0;\n      const hitBottom = this.y + this.radius >= this.boardHeight;\n      if (hitTop || hitBottom ){ this.vy *= -1; }\n    }\n\n    paddleCollision(player1, player2) {\n      if (this.vx > 0) { // moving right\n        // collision detection for right paddle\n        if ( this.x + this.radius >= player2.x && \n          this.x + this.radius <= player2.x + player2.width &&\n          ( this.y >= player2.y && this.y <= player2.y + player2.height )\n          ){\n            // if true then there's a collision\n            this.vx *= -1;\n            this.ping.play(); // play the sound when paddle hits the ball          \n        }\n\n      } else { // moving left\n        // collision detection for left paddle\n        if ( this.x - this.radius >= player1.x && // left edge of the ball is\n          this.x - this.radius <= player1.x + player1.width &&\n          (this.y >= player1.y && this.y <= player1.y + player1.height) \n          ){\n            this.vx *= -1;\n            this.ping.play();\n          }\n      }\n    }\n\n    goal(player) {\n      player.score++;\n      this.reset();\n    }\n\n    // change the speed of balls\n    changeSpeed(){\n      document.addEventListener('keydown', event => {\n        switch(event.key){\n          case KEYS.ballFast:\n              BallOptions.speed = Math.min(BallOptions.speed + 1, BallOptions.maxSpeed);\n              if ( this.vx > 0){ \n                this.vx = Math.min(this.vx + 1, BallOptions.maxSpeed);\n              } else { \n                this.vx = Math.max((Math.abs(this.vx) + 1) * -1, -BallOptions.maxSpeed);\n              }\n              if ( this.vy > 0){ \n                this.vy = Math.min(this.vy + 1, BallOptions.maxSpeed);\n              } else { \n                this.vy = Math.max((Math.abs(this.vy) + 1) * -1, -BallOptions.maxSpeed);\n              }\n            break;\n          case KEYS.ballSlow:\n              BallOptions.speed = Math.max(BallOptions.speed - 1, BallOptions.minSpeed);\n              if ( this.vx > 0){ \n                this.vx = Math.max(this.vx - 1, BallOptions.minSpeed);\n              } else { \n                this.vx = Math.min((Math.abs(this.vx) - 1) * -1, -BallOptions.minSpeed);\n              }\n              if ( this.vy > 0){ \n                this.vy = Math.max(this.vy - 1, BallOptions.minSpeed);\n              } else { \n                this.vy = Math.min((Math.abs(this.vy) - 1) * -1, -BallOptions.minSpeed);\n              }\n            break;\n        }\n      });\n    }\n\n    render(svg, player1, player2){\n      this.gameTime++;\n      \n      if (this.gameTime < GameOptions.intervalGameTime){\n        this.reset();\n      }\n      \n      // create a ball\n      let circle = document.createElementNS(SVG_NS, 'circle');\n        circle.setAttributeNS(null, 'r', this.radius);\n        circle.setAttributeNS(null, 'fill', this.color);\n        circle.setAttributeNS(null, 'cx', this.x);\n        circle.setAttributeNS(null, 'cy', this.y);\n\n        svg.appendChild(circle);\n        \n      // initiate the ball moving after intervalGameTime(settings.js)\n      if (this.gameTime >= GameOptions.intervalGameTime) {\n        this.x += this.vx; \n        this.y += this.vy;  \n      }\n\n      // change ball direction when a player scores\n      const rightGoal = this.x + this.radius >= this.boardWidth;\n      const leftGoal = this.x - this.radius <= 0;\n      \n      if ( rightGoal ) {\n        this.direction = 1;\n        this.goal(player1);\n      } else if ( leftGoal ){\n        this.direction = -1;\n        this.goal(player2);\n      }\n    \n      // bounce when the ball hits the walls\n      this.wallCollision(this.gameTime);\n      \n      // reflect when the ball hits the paddle\n      this.paddleCollision(player1, player2);\n    } // end of render()\n}","import { SVG_NS } from \"../settings\";\nexport default class Score {\n    constructor(x, y = 40, size = 32) {\n      this.x = x;\n      this.y = y;\n      this.size = size;\n    }\n    \n    render(svg, score) {\n        let text = document.createElementNS(SVG_NS, 'text');\n        text.setAttributeNS(null, 'x', this.x );\n        text.setAttributeNS(null, 'y', this.y );\n        text.setAttributeNS(null, 'font-family', `'Silkscreen Web', monotype`);\n        text.setAttributeNS(null, 'font-size', this.size );\n        text.setAttributeNS(null, 'fill', '#FFFFFF');\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n\n        text.textContent = score;\n\n        svg.appendChild(text);\n    }\n  }","import { SVG_NS, KEYS } from \"../settings\";\n\nexport default class SingleMode {\n    constructor(boardWidth, boardHeight){\n        this.x = boardWidth / 2;\n        this.y = (boardHeight / 2) - 40;\n        this.animate = 0;\n        this.limit = 16;\n    }\n\n    render(svg){\n        let text = document.createElementNS(SVG_NS, 'text');\n        let tspan = document.createElementNS(SVG_NS, 'tspan');\n        let tspan2 = document.createElementNS(SVG_NS, 'tspan');\n        text.setAttributeNS(null, 'x', this.x);\n        text.setAttributeNS(null, 'y', this.y);\n        text.setAttributeNS(null, 'fill', '#FFFFFF');\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n        text.setAttributeNS(null, 'fill', '#FFFFFF');\n        text.setAttributeNS(null, 'font-family', `'Silkscreen Web', monotype`);\n        text.setAttributeNS(null, 'font-size', 32 );\n\n        tspan.setAttributeNS(null, 'x', this.x);\n        tspan.setAttributeNS(null, 'y', this.y + 32);\n        tspan.setAttributeNS(null, 'font-size', 20 );\n\n        tspan2.setAttributeNS(null, 'x', this.x);\n        tspan2.setAttributeNS(null, 'y', this.y + 140);\n        tspan2.setAttributeNS(null, 'font-size', 16 );\n        tspan2.setAttributeNS(null, 'fill', 'transparent');\n        // flash the return text \n        if ( this.animate < this.limit ){\n            tspan2.setAttributeNS(null, 'fill', 'transparent');\n        } else if ( this.animate >= this.limit && this.animate < this.limit * 2 ){\n            tspan2.setAttributeNS(null, 'fill', '#70B2B1');\n        } else if ( this.animate >= this.limit * 2 && this.animate < this.limit * 3 ){\n            tspan2.setAttributeNS(null, 'fill', '#26601F');\n        } else if ( this.animate >= this.limit * 3 && this.animate < this.limit * 4 ){\n            tspan2.setAttributeNS(null, 'fill', '#70B2B1');\n        } else if (this.animate >= this.limit * 4 ) {\n            this.animate = 0;\n        }\n        this.animate++;\n        \n        text.textContent = 'Sorry';\n        tspan.textContent = 'Signle mode is not available';\n        tspan2.textContent = 'Press <Enter> to go back';\n        \n        svg.append(text);\n        text.append(tspan, tspan2);\n    }\n}","import { SVG_NS, GameOptions } from \"../settings\";\n\n// method to define who is the winner\nexport default class Winner {\n    constructor( boardWidth ){\n        this.x = boardWidth / 2;\n        this.animate = 0;\n        this.limit = 16;\n    }\n\n    render(svg, winner){\n        let text = document.createElementNS(SVG_NS, 'text');\n        let tspan = document.createElementNS(SVG_NS, 'tspan');\n        let tspan2 = document.createElementNS(SVG_NS, 'tspan');\n        let y = 120;\n        text.setAttributeNS(null, 'x', this.x );\n        text.setAttributeNS(null, 'y', y );\n        text.setAttributeNS(null, 'font-family', `'Silkscreen Web', monotype`);\n        text.setAttributeNS(null, 'font-size', 24 );\n        text.setAttributeNS(null, 'fill', '#FFFFFF');\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n\n        tspan.setAttributeNS(null, 'x', this.x );\n        tspan.setAttributeNS(null, 'y', y + 40);\n        tspan.setAttributeNS(null, 'text-anchor', 'middle');\n        tspan.setAttributeNS(null, 'fill', 'transparent');\n        // flash the return text \n        if ( this.animate < this.limit ){\n            tspan.setAttributeNS(null, 'fill', 'transparent');\n        } else if ( this.animate >= this.limit && this.animate < this.limit * 2 ){\n            tspan.setAttributeNS(null, 'fill', '#70B2B1');\n        } else if ( this.animate >= this.limit * 2 && this.animate < this.limit * 3 ){\n            tspan.setAttributeNS(null, 'fill', '#26601F');\n        } else if ( this.animate >= this.limit * 3 && this.animate < this.limit * 4 ){\n            tspan.setAttributeNS(null, 'fill', '#70B2B1');\n        } else if (this.animate >= this.limit * 4 ) {\n            this.animate = 0;\n        }\n        this.animate++;\n\n        tspan2.setAttributeNS(null, 'x', this.x );\n        tspan2.setAttributeNS(null, 'y', y + 116 );\n        tspan2.setAttributeNS(null, 'text-anchor', 'middle');\n        tspan2.setAttributeNS(null, 'fill', 'grey');\n        tspan2.setAttributeNS(null, 'font-size', 12 );\n        \n        text.textContent = `The winner is `;\n        tspan.textContent = winner;\n        tspan2.textContent = 'Press <Enter> to return';\n\n        svg.appendChild(text);\n        text.appendChild(tspan);\n        text.appendChild(tspan2);\n    }\n\n    winnerIs(score1, score2){ \n        const player1_isWinner = score1 >= GameOptions.winningScore;\n        const player2_isWinner = score2 >= GameOptions.winningScore;\n\n        if ( player1_isWinner ){\n            return this.winner = 'player 1';\n        } else if ( player2_isWinner ){\n            return this.winner = 'player 2';\n        }\n    }\n}","import Init from \"./Init\";\nimport Board from \"./Board\";\nimport Net from \"./Net\";\nimport Paddle from \"./Paddle\";\nimport Ball from \"./Ball\";\nimport Score from \"./Score\";\nimport SingleMode from \"./SingleMode\";\nimport Winner from \"./Winner\";\nimport { SVG_NS, KEYS, PaddleOptions, BallOptions } from \"../settings\";\n\nexport default class Game {\n  constructor(element, width, height) {\n    this.element = element;\n    this.width = width;\n    this.height = height;\n\n    // SVG container\n    this.gameElement = document.getElementById(this.element);\n    \n    // initiate the first screen of game\n    this.initPlayer1 = new Init(\n      (this.width / 2) - 100, \n      (this.height / 2) + 8, \n      '> Single',\n    );\n    this.initPlayer2 = new Init(\n      (this.width / 2) + 100, \n      (this.height / 2) + 8, \n      '> Multi',\n    );\n    this.caption = new Init(\n      this.width / 2,\n      this.height - 20,\n      'Press <- or -> to select the mode and hit <Enter>',\n      12\n    );\n\n    // create the board and net with same size of the SVG container\n    this.board = new Board(this.width, this.height);\n    this.net = new Net(this.width, this.height);\n\n    // create single-play mode notice\n    this.singlePlay = new SingleMode(this.width, this.height);\n\n    // create new paddles for the each players\n    this.player1 = new Paddle(\n      this.height,\n      PaddleOptions.paddleWidth,\n      PaddleOptions.paddleHeight,\n      PaddleOptions.boardGap,\n      ((this.height - PaddleOptions.paddleHeight) / 2),\n      PaddleOptions.player1Color,\n      KEYS.a,\n      KEYS.z,\n    );\n    this.player2 = new Paddle(\n      this.height,\n      PaddleOptions.paddleWidth,\n      PaddleOptions.paddleHeight,\n      this.width - (PaddleOptions.paddleWidth + PaddleOptions.boardGap),\n      ((this.height - PaddleOptions.paddleHeight) / 2),\n      PaddleOptions.player2Color,\n      KEYS.up,\n      KEYS.down,\n    );\n\n    // create scores for players\n    this.score1 = new Score(this.width / 2 - 40, 40, 32);\n    this.score2 = new Score(this.width / 2 + 40, 40, 32);\n\n    // create a new ball for the game\n    this.ball = {};\n    for (let i = 0; i < BallOptions.number; i++){\n      this.ball[`new_${i}`] = new Ball(\n        [i], // nth of the  ball\n        this.width, // width of the Board\n        this.height, // width of the Board\n        BallOptions.ballSize[i], // size of each balls in settings.js (Default: 8)\n        BallOptions.ballColor[i] // color of each balls in settings.js (Default: white)\n        );\n    }\n\n    // switch between first screen and game screen\n    this.showFirstScreen = true;\n    \n    // keys of switches which affect gameplay\n    document.addEventListener('keydown', event => { \n      switch(event.key){\n        case KEYS.right:\n          if ( this.showFirstScreen === true ){\n            this.isMulti = !this.isMulti;\n          }\n          break;\n        case KEYS.left:\n          if ( this.showFirstScreen === true ){\n            this.isMulti = !this.isMulti;\n          }\n          break;\n        case KEYS.spaceBar:\n          this.pause = !this.pause;\n          break;\n        case KEYS.enter:\n          this.startPlay =!this.startPlay;\n          this.showFirstScreen = true; // return to the first screen\n          break;\n      }\n    });\n\n    // new Object and instance for the winner\n    this.winner;\n    this.displayWinner = new Winner(this.width);\n\n  } /* \n    // end of constructor\n    */\n  \n  multiPlay(svg){\n    \n    // Render the net\n    this.net.render(svg);\n    \n    // Render the paddles\n    this.player1.render(svg);\n    this.player2.render(svg);\n    \n    // Render the ball\n    for (let i = 0; i < BallOptions.number; i++){\n      this.ball[`new_${i}`].render(svg, this.player1, this.player2);\n    }\n\n    // Update scores\n    this.score1.render(svg, this.player1.score);\n    this.score2.render(svg, this.player2.score);\n  } // end of multiPlay()\n\n  resetGame(){\n    // reset \n\n      // speed of balls\n      BallOptions.speed = 3;\n      // the winner\n        this.winner = undefined;\n      // positions of balls\n      for (let i = 0; i < BallOptions.number; i++){\n        this.ball[`new_${i}`].x = 0;\n        this.ball[`new_${i}`].y = 0;\n      }    \n      // the paddle position\n      this.player1.x = PaddleOptions.boardGap;\n      this.player1.y = ((this.height - PaddleOptions.paddleHeight) / 2);\n      this.player2.x = this.width - (PaddleOptions.paddleWidth + PaddleOptions.boardGap);\n      this.player2.y = ((this.height - PaddleOptions.paddleHeight) / 2);\n      // the scores\n      this.player1.score = 0;\n      this.player2.score = 0; \n  }\n\n  render() {\n    // if pause === true, render stop\n    if ( this.pause ) { return }\n    \n    // hide the first screen when game begins\n    if ( this.startPlay === true ){ this.showFirstScreen = false; }\n    \n    // properties for SVG tag\n    this.gameElement.innerHTML = ''; // Clear the html before appending to fix a render bug 👾\n    let svg = document.createElementNS(SVG_NS, \"svg\");\n    svg.setAttributeNS(null, \"width\", this.width);\n    svg.setAttributeNS(null, \"height\", this.height);\n    svg.setAttributeNS(null, \"viewBox\", [0, 0, this.width, this.height]);\n    this.gameElement.appendChild(svg);\n\n    // Render the board\n    this.board.render(svg);\n    \n    // Render first screen contents\n    if (this.showFirstScreen === true){\n      this.initPlayer1.render(svg, !this.isMulti);\n      this.initPlayer2.render(svg, this.isMulti);\n      this.caption.render(svg);\n      \n      // reset the game properties\n      this.resetGame();\n    }\n    \n    // Assign who is the winner\n    this.winner = this.displayWinner.winnerIs(this.player1.score, this.player2.score);\n    \n    // Display the winner of the game\n    if ( this.winner ) {\n      this.displayWinner.render(svg, this.winner);\n      return\n    }\n    \n    // Render game contents\n    if ( this.startPlay === true ){\n      // Play single-player mode\n      if ( !this.isMulti ){ this.singlePlay.render(svg); }\n      // Play muti-players mode\n      else { \n        this.multiPlay(svg);\n       }\n    }\n  } // end of render()\n}","import './styles/game.css';\nimport Game from './partials/Game';\n\n// create a game instance\nconst game = new Game('game', 512, 256);\n(function gameLoop() {\n  game.render(); //  render method calls continously in gameLoop\n  requestAnimationFrame(gameLoop);\n})();"]}