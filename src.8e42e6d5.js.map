{"version":3,"sources":["src/settings.js","src/partials/Init.js","src/partials/Board.js","src/partials/Net.js","src/partials/Paddle.js","src/partials/Ball.js","src/partials/Score.js","src/partials/SingleMode.js","src/partials/Winner.js","src/partials/Game.js","src/index.js"],"names":["SVG_NS","GameOptions","winningScore","intervalGameTime","displayGuideline","KEYS","right","left","a","z","up","down","spaceBar","enter","ballFast","ballSlow","ballBig","ballSmall","ballPlus","ballMinus","toggleGuideline","PaddleOptions","paddleWidth","paddleHeight","paddleMinHeight","boardGap","player1Color","player2Color","speed","force","BallOptions","number","maxBallNum","minBallNum","minSpeed","maxSpeed","ballSize","maxBallsize","minBallsize","ballColor","Init","x","y","text","textSize","animate","limit","svg","selected","color","document","createElementNS","setAttributeNS","textContent","appendChild","Board","width","height","rect","Net","line","Paddle","name","boardHeight","upKey","downKey","score","keyState","addEventListener","event","keyCode","Math","max","min","Ball","index","boardWidth","radius","direction","ping","Audio","pingSound","gameTime","collisionTime1","collisionTime2","paddlePosition1","paddlePosition2","ballSpeed","moveTo","l","reset","changeSpeed","vx","vy","hitTop","hitBottom","player1","player2","objBall","yDirection","fxCollision","player","abs","recordPos","unshift","length","pop","every","pos","paddle","detectMovement","play","dePaddle","toggleGuideLine","Object","keys","forEach","key","totalWidth","ballX","ballY","ballVx","ballVy","predictY","firstTimeCl","avrTimeCl","totaltime","totalHeight","numCollision","lineX","lineY","i","ceil","remainTimeCl","vectorDirection","sign","push","logPlayerPosition","circle","rightGoal","leftGoal","goal","wallCollision","paddleCollision","e","path","join","Score","size","SingleMode","tspan","tspan2","append","Winner","winner","score1","score2","player1_isWinner","player2_isWinner","Game","element","gameElement","getElementById","initFirstScr","board","net","singlePlay","showFirstScreen","isMulti","pause","startPlay","resetGame","rdmIndex1","floor","random","rdmIndex2","ball","undefined","displayWinner","initPlayer1","initPlayer2","caption","render","lastBall","changeSize","innerHTML","winnerIs","multiPlay","game","gameLoop","requestAnimationFrame"],"mappings":"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","file":"src.8e42e6d5.js","sourceRoot":"..","sourcesContent":["export const SVG_NS  = 'http://www.w3.org/2000/svg';\n\nexport const GameOptions = {\n    winningScore: 10,\n    intervalGameTime: 30, // unit is FPS\n    displayGuideline: true,\n}\n\n// key setting for the player 1 and player 2\nexport const KEYS = {\n    right: 39,\n    left: 37,\n    a: 65,        \n    z: 90,        \n    up: 38, \n    down: 40,\n    spaceBar: 32,\n    enter: 13,\n    ballFast: 70,\n    ballSlow: 86,\n    ballBig: 71,\n    ballSmall: 66,\n    ballPlus: 72,\n    ballMinus: 78,\n    toggleGuideline: 82,\n  }\n\n// properties of Paddle\nexport const PaddleOptions = {\n    paddleWidth : 8,\n    paddleHeight : 72,\n    paddleMinHeight : 32,\n    boardGap : 10,\n    player1Color: '#FF0000',\n    player2Color: '#00FFFF',\n    speed: 1.25,\n    force: 0.25,\n}\n\n// properties of Ball\nexport const BallOptions = {\n    number: 1,  // must be larger than 0 \n                // must be same in Game.js reset section => BallOptions.number\n    maxBallNum: 10,\n    minBallNum: 1,\n    speed: 3.5, // must be larger than 0 \n                // must be same in Game.js reset section => BallOptions.speed\n    minSpeed: 1,\n    maxSpeed: 10,\n    ballSize: [4, 10, 12, 14],\n    maxBallsize: 56,\n    minBallsize: 4, // must be larger than 0\n    ballColor: ['rgba(240,240,240,0.8)', 'rgba(37,212,255,0.6)', 'rgba(255,252,37,0.6)', 'rgba(40,255,37,0.6)']\n}","import { SVG_NS } from \"../settings\";\n\nexport default class Init {\n    constructor(x, y, text, textSize = 20){\n        this.x = x;\n        this.y = y;\n        this.text = text;\n        this.textSize = textSize;\n        this.animate = 0;\n        this.limit = 32;\n    }\n\n    render(svg, selected){\n        // flash the selected game option\n        if ( selected && this.animate < this.limit ){\n            this.color = 'white';\n        } else if ( selected && (this.animate >= this.limit && this.animate < this.limit * 2)){\n            this.color = 'transparent';\n        } else if (this.animate >= this.limit * 2) {\n            this.animate = 0;\n        } else if (!selected){\n            this.animate = 0;\n            this.color = 'grey';\n        };\n        this.animate++;\n        \n        // renders svg texts\n        let text = document.createElementNS(SVG_NS, 'text');\n\n        text.setAttributeNS(null, 'x', this.x );\n        text.setAttributeNS(null, 'y', this.y );\n        text.setAttributeNS(null, 'font-family', `'Silkscreen Web', monotype`);\n        text.setAttributeNS(null, 'font-size', this.textSize );\n        text.setAttributeNS(null, 'fill', this.color);\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n        text.setAttributeNS(null, 'cursor', 'pointer');\n        text.textContent = this.text;\n\n        svg.appendChild(text);\n    }\n}","import { SVG_NS } from \"../settings\";\n\nexport default class Board {\n    constructor(width, height) {\n      this.width = width;\n      this.height = height;\n    } // end of constructor\n    \n    render(svg) {\n      // create rect\n        let rect = document.createElementNS(SVG_NS, 'rect');\n        rect.setAttributeNS(null, 'fill', '#353535');\n        rect.setAttributeNS(null, 'width', this.width);\n        rect.setAttributeNS(null, 'height', this.height);\n\n        // append rect\n        svg.appendChild(rect);\n    }\n  }","import { SVG_NS } from \"../settings\";\nexport default class Net {\n    constructor(width, height) {\n      this.width = width;\n      this.height = height;\n    } // end of constructor\n    \n    render(svg) {\n      // create line\n        let line = document.createElementNS(SVG_NS, 'line');\n        line.setAttributeNS(null, 'x1', (this.width / 2) );\n        line.setAttributeNS(null, 'y1', 0 );\n        line.setAttributeNS(null, 'x2', (this.width / 2) );\n        line.setAttributeNS(null, 'y2', this.height );\n  \n        line.setAttributeNS(null, 'stroke', '#FFFFFF');\n        line.setAttributeNS(null, 'stroke-width', 2);\n        line.setAttributeNS(null, 'stroke-dasharray', [16, 34]);\n        line.setAttributeNS(null, 'stroke-dashoffset', 4);\n  \n        // append line\n        svg.appendChild(line);\n    }\n  }","import { SVG_NS, KEYS, PaddleOptions } from \"../settings\";\n\nexport default class Paddle {\n    constructor(name, boardHeight, width, height, x, y, force = 0, color = '#FFFFFF', upKey, downKey) {\n        this.name = name;\n        this.boardHeight = boardHeight;\n        this.width = width;\n        this.height = height;\n        this.x = x;\n        this.y = y;\n        this.speed = PaddleOptions.speed;\n        this.force = force;\n        this.score = 0;\n        this.color = color;\n        this.upKey = upKey;\n        this.downKey = downKey;\n\n        this.keyState = {}; // update which keys are pressing\n\n        document.addEventListener('keydown', event => {\n            this.keyState[event.keyCode] = true;\n        });\n        document.addEventListener('keyup', event => {\n            this.force = 0;\n            this.keyState[event.keyCode] = false;\n        });\n    } // end of constructor\n\n    up(){\n        // move the paddle up but not above the top of the board\n        const speed = this.speed + this.force;\n        this.y = Math.max( this.y - speed, 0 );\n        this.force += PaddleOptions.force;\n    }\n\n    down(){\n        // move the paddle down but not more than the bottom of the board\n        const speed = this.speed + this.force;\n        this.y = Math.min( this.y + speed, (this.boardHeight - this.height) );\n        this.force += PaddleOptions.force;\n    }\n    \n    render(svg) {\n        // smoothen movement of paddles\n        if (this.keyState[KEYS.a] && this.upKey === KEYS.a ) {\n            this.up();\n        }\n        if (this.keyState[KEYS.z] && this.downKey === KEYS.z ) {\n            this.down();\n        }\n        if (this.keyState[KEYS.up] && this.upKey === KEYS.up ) {\n            this.up();\n        }\n        if (this.keyState[KEYS.down] && this.downKey === KEYS.down ) {\n            this.down();\n        }\n\n        // create SVG of rect\n        let rect = document.createElementNS(SVG_NS, 'rect');\n        rect.setAttributeNS(null, 'fill', this.color);\n        rect.setAttributeNS(null, 'width', this.width);\n        rect.setAttributeNS(null, 'height', this.height);\n        rect.setAttributeNS(null, 'x', this.x);\n        rect.setAttributeNS(null, 'y', this.y);\n\n        // append SVG\n        svg.appendChild(rect);\n    }\n}\n\n","import { SVG_NS, KEYS, PaddleOptions, BallOptions, GameOptions } from \"../settings\";\nimport pingSound from \"../../public/sounds/pong-01.wav\";\n\nexport default class Ball {\n    constructor(index, boardWidth, boardHeight, radius = 8, color = '#FFFFFF') {\n      this.index = index;\n      this.boardWidth = boardWidth;\n      this.boardHeight = boardHeight;\n      this.radius = radius;\n      this.color = color;\n      this.direction = 1;\n\n      this.ping = new Audio(pingSound);\n\n      this.gameTime = 0; // Time for game play in FPS\n      this.collisionTime1 = 0;\n      this.collisionTime2 = 0;\n\n      this.paddlePosition1 = [];\n      this.paddlePosition2 = [];\n\n      this.ballSpeed = 0.3; // Speed increment every time hits the paddle\n\n      this.moveTo = {l:[]};\n\n      this.reset();\n      this.changeSpeed();\n      \n    } // end of constructor\n\n    reset(){\n      this.x = this.boardWidth / 2;\n      this.y = this.boardHeight / 2;\n      this.vx = 0;\n      this.vy = 0;\n\n      this.vx = this.direction * BallOptions.speed;\n      this.vy = 0;\n\n      \n      this.moveTo['m'] = '';\n      this.moveTo['l'] = [];\n      \n      // Reset the time when either player scores\n      if (this.gameTime >= GameOptions.intervalGameTime ){ \n        this.gameTime = 0;\n        this.collisionTime1 = 0;\n        this.collisionTime2 = 0;\n       }\n    }\n\n    wallCollision(){\n      const hitTop = this.y - this.radius <= 0;\n      const hitBottom = this.y + this.radius >= this.boardHeight;\n      if (hitTop || hitBottom ){ this.vy *= -1; }\n    }\n\n    paddleCollision(player1, player2, objBall) {\n      if (this.vx > 0) { // moving right\n        // collision detection for player2\n        if ((this.x + this.radius >= player2.x && this.x - this.radius <= player2.x + player2.width) &&\n          (this.y >= player2.y && this.y <= player2.y + player2.height)){\n            // add spins to the ball in response to the direction of a paddle\n            let yDirection;\n            if ( player2.keyState[38] ){ yDirection = -1; } \n            else if ( player2.keyState[40] ){ yDirection = 1; } \n            else { yDirection = 0; }\n\n            this.fxCollision(yDirection, player2, objBall);\n\n        }\n      } else { // moving left\n        // collision detection for player1\n        if ((this.x + this.radius >= player1.x && this.x - this.radius <= player1.x + player1.width) &&\n          (this.y >= player1.y && this.y <= player1.y + player1.height)){\n            let yDirection;\n            if ( player1.keyState[65] ){ yDirection = -1; } \n            else if ( player1.keyState[90] ){ yDirection = 1; } \n            else { yDirection = 0; }\n\n            this.fxCollision(yDirection, player1, objBall);\n            \n          }\n      }\n      \n      // changes paddle color\n      if (this.gameTime < this.collisionTime1){\n        player1.color = 'white';\n      } else {\n        player1.color = PaddleOptions.player1Color;\n      }\n\n      if (this.gameTime < this.collisionTime2){\n        player2.color = 'white';\n      } else {\n        player2.color = PaddleOptions.player2Color;\n      }\n      \n    } // end of paddleCollision()\n    \n    goal(player) {\n      player.score++;\n    }\n\n    // change the speed of balls\n    changeSpeed(){\n      document.addEventListener('keydown', event => {\n        switch(event.keyCode){\n          case KEYS.ballFast:\n              if ( this.vx > 0){ \n                this.vx = Math.min(this.vx + 1, BallOptions.maxSpeed);\n              } else { \n                this.vx = Math.max((Math.abs(this.vx) + 1) * -1, -BallOptions.maxSpeed);\n              }\n            break;\n          case KEYS.ballSlow:\n              if ( this.vx > 0){ \n                this.vx = Math.max(this.vx - 1, BallOptions.minSpeed);\n              } else { \n                this.vx = Math.min((Math.abs(this.vx) - 1) * -1, -BallOptions.minSpeed);\n              }\n            break;\n        }\n\n      });\n    }\n\n    logPlayerPosition(player, recordPos){\n      recordPos.unshift(player.y);\n      if (recordPos.length > 3){ recordPos.pop(); }\n    }\n    \n    detectMovement(player, recordPos){\n      const notMoved = recordPos.every(pos=> pos === recordPos[0])\n      if (notMoved){ player.force = 0; }\n    }\n\n    // decrease the size of opponent's paddle\n    dePaddle(paddle){\n      return Math.max(paddle - 8, PaddleOptions.paddleMinHeight);\n    }\n\n    // functions of paddle collision\n    fxCollision(direction, player, objBall){ \n      // reset the guideline\n      this.moveTo['l'] = [];\n      \n      // speed up\n      if (player.name === 'player1'){\n        // detect paddle movement\n        // if not moved, return force = 0\n        this.detectMovement(player, this.paddlePosition1);\n        this.vx = Math.min(Math.abs(this.vx) + this.ballSpeed, BallOptions.maxSpeed);\n        \n        // assign collisionTime for player\n        this.collisionTime1 = this.gameTime + 10;\n      \n      } else {\n        this.detectMovement(player, this.paddlePosition2);\n        this.vx = Math.min(Math.abs(this.vx + this.ballSpeed), BallOptions.maxSpeed) * -1;\n\n        this.collisionTime2 = this.gameTime + 10;\n      } //* end if\n\n      // adjust  angles and power to the ball\n      this.vy += (direction * player.force) / 2;\n\n      // play the sound when paddle hits the ball\n      this.ping.play(); \n\n      // decrease size of the player's paddle \n      player.height = this.dePaddle(player.height);\n\n      this.toggleGuideLine(objBall)\n      \n    } // end fxCollision();\n\n    // toggle the guideline of the ball direction\n    toggleGuideLine(objBall){\n      Object.keys(objBall).forEach(key => {\n\n        let totalWidth = this.boardWidth - (PaddleOptions.paddleWidth + PaddleOptions.boardGap), \n          totalHeight = this.boardHeight,\n          ballX, ballY, ballVx, ballVy,\n          predictY, firstTimeCl, avrTimeCl,\n          totaltime;\n\n        ballX = objBall[key].x;\n        ballY = objBall[key].y;\n        ballVx = objBall[key].vx;\n        ballVy = objBall[key].vy;\n        totaltime = Math.abs(totalWidth / ballVx);\n        predictY = ballY + (totaltime * ballVy);\n        firstTimeCl = ballVy < 0 ? Math.abs(ballY / ballVy) : Math.abs((totalHeight - ballY) / ballVy);\n        avrTimeCl = Math.abs( totalHeight / ballVy);\n\n        let numCollision = Math.ceil((totaltime - firstTimeCl) / avrTimeCl), \n            remainTimeCl = (totaltime - firstTimeCl) % avrTimeCl,\n            lineX, lineY, vectorDirection = 1, yVectorDirection,\n            i;\n        \n        // start point of the guideline\n        this.moveTo['m'] = `M${ballX} ${ballY}`;\n\n        // end point of the guideline\n        if ( predictY < 0 || predictY > totalHeight ){\n\n          // wall collision\n          for (i = 0; i < (numCollision + 1); i++){\n            switch (i){\n\n              case 0 :\n                // first collision\n                yVectorDirection = Math.sign(ballVy);\n                         \n                lineX = ballX + (firstTimeCl * ballVx);\n                // lineY = ballY + (firstTimeCl * ballVy) - (this.radius * yVectorDirection );\n                lineY = ballY + (firstTimeCl * ballVy);\n                \n                vectorDirection *= -1;\n                this.moveTo['l'].push(`L${lineX} ${lineY}`);\n                break;\n\n              case numCollision :\n                // last collision\n                lineX = ballVx < 0 ? PaddleOptions.boardGap + PaddleOptions.paddleWidth : totalWidth;\n                \n                lineY = Math.min(lineY + (vectorDirection * remainTimeCl * ballVy), totalHeight);\n                \n                vectorDirection *= -1;\n                this.moveTo['l'].push(`L${lineX} ${lineY}`);\n                break;\n              default:\n                // default collision\n                lineX = lineX + (avrTimeCl * ballVx);\n                lineY = Math.min(lineY + (vectorDirection * avrTimeCl * ballVy), totalHeight);\n                vectorDirection *= -1;\n\n                this.moveTo['l'].push(`L${lineX} ${lineY}`);\n            }\n            \n          } // end for\n\n        } else {\n          // no wall collision\n\n          if ( ballVx < 0 ){\n            this.moveTo['l'].push(`${(PaddleOptions.boardGap + PaddleOptions.paddleWidth)} ${predictY}`);\n          } else {\n            this.moveTo['l'].push(`L${this.boardWidth - (PaddleOptions.boardGap + PaddleOptions.paddleWidth)} ${predictY}`);\n          }\n\n        } // end end point if\n\n      }); // end Object forEach\n      // console.log(this.moveTo['l']);\n    }\n\n    render(svg, player1, player2, objBall){\n      this.gameTime++;\n      this.logPlayerPosition(player1, this.paddlePosition1);\n      this.logPlayerPosition(player2, this.paddlePosition2);\n      \n      // initiate the ball moving after intervalGameTime(settings.js)\n      if (this.gameTime < GameOptions.intervalGameTime){\n        this.reset();\n      } else {\n        this.x += this.vx; \n        this.y += this.vy;  \n      } \n      // create a ball\n      let circle = document.createElementNS(SVG_NS, 'circle');\n        circle.setAttributeNS(null, 'r', this.radius);\n        circle.setAttributeNS(null, 'fill', this.color);\n        circle.setAttributeNS(null, 'cx', this.x);\n        circle.setAttributeNS(null, 'cy', this.y);\n\n        svg.appendChild(circle);\n      \n      // change ball direction when a player scores\n      const rightGoal = this.x + this.radius >= this.boardWidth;\n      const leftGoal = this.x - this.radius <= 0;\n      \n      if ( rightGoal ) {\n        this.direction = 1;\n        this.goal(player1);\n      } else if ( leftGoal ){\n        this.direction = -1;\n        this.goal(player2);\n      }\n      if (rightGoal || leftGoal){\n        this.reset();\n\n        // reset the position of paddles only the number of balls is greater than 1\n        if ( Object.keys(objBall).length === 1){\n          player1.y = ((this.boardHeight - PaddleOptions.paddleHeight) / 2);\n          player1.height = PaddleOptions.paddleHeight;\n\n          player2.y = ((this.boardHeight - PaddleOptions.paddleHeight) / 2);\n          player2.height = PaddleOptions.paddleHeight;\n        }\n      }\n    \n      // bounce when the ball hits the walls\n      this.wallCollision(this.gameTime);\n      \n      // reflect when the ball hits the paddle\n      this.paddleCollision(player1, player2, objBall);\n\n      document.addEventListener('keydown', e => {\n        if (e.keyCode === KEYS.toggleGuideline){\n          GameOptions.displayGuideline = !GameOptions.displayGuideline;\n        };\n      });\n      if (GameOptions.displayGuideline === true){\n        let path = document.createElementNS(SVG_NS, 'path');\n          path.setAttributeNS(null, 'd', `${this.moveTo['m']} ${this.moveTo['l'].join(' ')}`);\n          path.setAttributeNS(null, 'fill', 'none');\n          path.setAttributeNS(null, 'stroke', 'rgba(255, 255, 255, 0.3)');\n          path.setAttributeNS(null, 'stroke-width', 2);\n          path.setAttributeNS(null, 'stroke-dasharray', [2, 8]);\n\n          svg.appendChild(path);\n      }\n\n    } // end of render()\n}","import { SVG_NS } from \"../settings\";\nexport default class Score {\n    constructor(x, y = 40, size = 32) {\n      this.x = x;\n      this.y = y;\n      this.size = size;\n    }\n    \n    render(svg, score) {\n        let text = document.createElementNS(SVG_NS, 'text');\n        text.setAttributeNS(null, 'x', this.x );\n        text.setAttributeNS(null, 'y', this.y );\n        text.setAttributeNS(null, 'font-family', `'Silkscreen Web', monotype`);\n        text.setAttributeNS(null, 'font-size', this.size );\n        text.setAttributeNS(null, 'fill', '#FFFFFF');\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n\n        text.textContent = score;\n\n        svg.appendChild(text);\n    }\n  }","import { SVG_NS, KEYS } from \"../settings\";\n\nexport default class SingleMode {\n    constructor(boardWidth, boardHeight){\n        this.x = boardWidth / 2;\n        this.y = (boardHeight / 2) - 40;\n        this.animate = 0;\n        this.limit = 16;\n    }\n\n    render(svg){\n        let text = document.createElementNS(SVG_NS, 'text');\n        let tspan = document.createElementNS(SVG_NS, 'tspan');\n        let tspan2 = document.createElementNS(SVG_NS, 'tspan');\n        text.setAttributeNS(null, 'x', this.x);\n        text.setAttributeNS(null, 'y', this.y);\n        text.setAttributeNS(null, 'fill', '#FFFFFF');\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n        text.setAttributeNS(null, 'fill', '#FFFFFF');\n        text.setAttributeNS(null, 'font-family', `'Silkscreen Web', monotype`);\n        text.setAttributeNS(null, 'font-size', 32 );\n\n        tspan.setAttributeNS(null, 'x', this.x);\n        tspan.setAttributeNS(null, 'y', this.y + 32);\n        tspan.setAttributeNS(null, 'font-size', 20 );\n\n        tspan2.setAttributeNS(null, 'x', this.x);\n        tspan2.setAttributeNS(null, 'y', this.y + 140);\n        tspan2.setAttributeNS(null, 'font-size', 16 );\n        tspan2.setAttributeNS(null, 'fill', 'transparent');\n        // flash the return text \n        if ( this.animate < this.limit ){\n            tspan2.setAttributeNS(null, 'fill', 'transparent');\n        } else if ( this.animate >= this.limit && this.animate < this.limit * 2 ){\n            tspan2.setAttributeNS(null, 'fill', '#70B2B1');\n        } else if ( this.animate >= this.limit * 2 && this.animate < this.limit * 3 ){\n            tspan2.setAttributeNS(null, 'fill', '#26601F');\n        } else if ( this.animate >= this.limit * 3 && this.animate < this.limit * 4 ){\n            tspan2.setAttributeNS(null, 'fill', '#70B2B1');\n        } else if (this.animate >= this.limit * 4 ) {\n            this.animate = 0;\n        }\n        this.animate++;\n        \n        text.textContent = 'Sorry';\n        tspan.textContent = 'Signle mode is not available';\n        tspan2.textContent = 'Press <Enter> to go back';\n        \n        svg.append(text);\n        text.append(tspan, tspan2);\n    }\n}","import { SVG_NS, GameOptions } from \"../settings\";\n\n// method to define who is the winner\nexport default class Winner {\n    constructor( boardWidth ){\n        this.x = boardWidth / 2;\n        this.animate = 0;\n        this.limit = 16;\n    }\n\n    render(svg, winner){\n        let text = document.createElementNS(SVG_NS, 'text');\n        let tspan = document.createElementNS(SVG_NS, 'tspan');\n        let tspan2 = document.createElementNS(SVG_NS, 'tspan');\n        let y = 120;\n        text.setAttributeNS(null, 'x', this.x );\n        text.setAttributeNS(null, 'y', y );\n        text.setAttributeNS(null, 'font-family', `'Silkscreen Web', monotype`);\n        text.setAttributeNS(null, 'font-size', 24 );\n        text.setAttributeNS(null, 'fill', '#FFFFFF');\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n\n        tspan.setAttributeNS(null, 'x', this.x );\n        tspan.setAttributeNS(null, 'y', y + 40);\n        tspan.setAttributeNS(null, 'text-anchor', 'middle');\n        tspan.setAttributeNS(null, 'fill', 'transparent');\n        // flash the return text \n        if ( this.animate < this.limit ){\n            tspan.setAttributeNS(null, 'fill', 'transparent');\n        } else if ( this.animate >= this.limit && this.animate < this.limit * 2 ){\n            tspan.setAttributeNS(null, 'fill', '#70B2B1');\n        } else if ( this.animate >= this.limit * 2 && this.animate < this.limit * 3 ){\n            tspan.setAttributeNS(null, 'fill', '#26601F');\n        } else if ( this.animate >= this.limit * 3 && this.animate < this.limit * 4 ){\n            tspan.setAttributeNS(null, 'fill', '#70B2B1');\n        } else if (this.animate >= this.limit * 4 ) {\n            this.animate = 0;\n        }\n        this.animate++;\n\n        tspan2.setAttributeNS(null, 'x', this.x );\n        tspan2.setAttributeNS(null, 'y', y + 116 );\n        tspan2.setAttributeNS(null, 'text-anchor', 'middle');\n        tspan2.setAttributeNS(null, 'fill', 'grey');\n        tspan2.setAttributeNS(null, 'font-size', 12 );\n        \n        text.textContent = `The winner is `;\n        tspan.textContent = winner;\n        tspan2.textContent = 'Press <Enter> to return';\n\n        svg.appendChild(text);\n        text.appendChild(tspan);\n        text.appendChild(tspan2);\n    }\n\n    winnerIs(score1, score2){ \n        const player1_isWinner = score1 >= GameOptions.winningScore;\n        const player2_isWinner = score2 >= GameOptions.winningScore;\n\n        if ( player1_isWinner ){\n            return this.winner = 'player 1';\n        } else if ( player2_isWinner ){\n            return this.winner = 'player 2';\n        }\n    }\n}","import Init from \"./Init\";\nimport Board from \"./Board\";\nimport Net from \"./Net\";\nimport Paddle from \"./Paddle\";\nimport Ball from \"./Ball\";\nimport Score from \"./Score\";\nimport SingleMode from \"./SingleMode\";\nimport Winner from \"./Winner\";\nimport { SVG_NS, KEYS, PaddleOptions, BallOptions } from \"../settings\";\n\nexport default class Game {\n  constructor(element, width, height) {\n    this.element = element;\n    this.width = width;\n    this.height = height;\n    \n    // SVG container\n    this.gameElement = document.getElementById(this.element);\n    \n    // initiate the first screen of game\n    this.initFirstScr();\n\n    // create the board and net with same size of the SVG container\n    this.board = new Board(this.width, this.height);\n    this.net = new Net(this.width, this.height);\n\n    // create single-play mode notice\n    this.singlePlay = new SingleMode(this.width, this.height);\n\n    // create new paddles for the each players\n    this.player1 = new Paddle(\n      'player1',\n      this.height,\n      PaddleOptions.paddleWidth,\n      PaddleOptions.paddleHeight,\n      PaddleOptions.boardGap,\n      ((this.height - PaddleOptions.paddleHeight) / 2),\n      0,\n      PaddleOptions.player1Color,\n      KEYS.a,\n      KEYS.z,\n    );\n    this.player2 = new Paddle(\n      'player2',\n      this.height,\n      PaddleOptions.paddleWidth,\n      PaddleOptions.paddleHeight,\n      this.width - (PaddleOptions.paddleWidth + PaddleOptions.boardGap),\n      ((this.height - PaddleOptions.paddleHeight) / 2),\n      0,\n      PaddleOptions.player2Color,\n      KEYS.up,\n      KEYS.down,\n    );\n\n    // create scores for players\n    this.score1 = new Score(this.width / 2 - 40, 40, 32);\n    this.score2 = new Score(this.width / 2 + 40, 40, 32);\n\n    // switch between first screen and game screen\n    this.showFirstScreen = true;\n    \n    // keys of switches which affect gameplay\n    document.addEventListener('keydown', event => {\n      switch(event.keyCode){\n        case KEYS.right:\n          if ( this.showFirstScreen === true ){\n            this.isMulti = !this.isMulti;\n          }\n          break;\n        case KEYS.left:\n          if ( this.showFirstScreen === true ){\n            this.isMulti = !this.isMulti;\n          }\n          break;\n        case KEYS.spaceBar:\n          this.pause = !this.pause;\n          break;\n        case KEYS.enter:\n          this.startPlay =!this.startPlay;\n          this.showFirstScreen = true; // return to the first screen\n          // reset the game properties\n          this.resetGame();\n          break;\n          \n        // change the number of balls\n        case KEYS.ballPlus:\n          if (this.isMulti){\n            BallOptions.number = Math.min(BallOptions.number + 1, BallOptions.maxBallNum);\n          \n            let index = BallOptions.number -1;\n            let rdmIndex1 = Math.floor(Math.random() * 4);\n            let rdmIndex2 = Math.floor(Math.random() * 4);\n            \n            this.ball[`new_${index}`] = new Ball(\n              [index],\n              this.width,\n              this.height,\n              BallOptions.ballSize[rdmIndex1],\n              BallOptions.ballColor[rdmIndex2]\n            );\n            break;\n          }\n        case KEYS.ballMinus:\n          if (this.isMulti){\n            if (BallOptions.number > 1){\n              BallOptions.number = Math.max(BallOptions.number - 1, BallOptions.minBallNum);\n              let index = BallOptions.number;\n              this.ball[`new_${index}`] = undefined;\n            }\n          }\n          break;\n      }\n    }); // end of keypress Event\n\n    // new Object and instance for the winner\n    this.winner;\n    this.displayWinner = new Winner(this.width);\n\n  } /* \n    // end of constructor\n    */\n\n  initFirstScr(){\n    this.initPlayer1 = new Init(\n      (this.width / 2) - 100, \n      (this.height / 2) + 8, \n      '> Single',\n    );\n    this.initPlayer2 = new Init(\n      (this.width / 2) + 100, \n      (this.height / 2) + 8, \n      '> Multi',\n    );\n    this.caption = new Init(\n      this.width / 2,\n      this.height - 20,\n      'Press <- or -> to select the mode and hit <Enter>',\n      12\n    );\n  }\n  \n  multiPlay(svg){\n    // Render the net\n    this.net.render(svg);\n    \n    // Render the paddles\n    this.player1.render(svg);\n    this.player2.render(svg);\n    \n    // Render the ball\n    let i = 0;\n    for (i; i < BallOptions.number; i++){\n      this.ball[`new_${i}`].render(svg, this.player1, this.player2, this.ball);\n    }\n\n    // Update scores\n    this.score1.render(svg, this.player1.score);\n    this.score2.render(svg, this.player2.score);\n\n    let lastBall = `new_${i - 1}`;\n    if (this.ballSize[KEYS.ballBig]) {\n      this.ballBig(this.ball[lastBall]);\n    }\n    if (this.ballSize[KEYS.ballSmall]){\n      this.ballSmall(this.ball[lastBall]);\n    }\n  } // end of multiPlay()\n\n  // change the size of balls\n  changeSize(){\n    document.addEventListener('keydown', event => {\n      this.ballSize[event.keyCode] = true;\n    });\n    document.addEventListener('keyup', event => {\n      this.ballSize[event.keyCode] = false;\n    })\n  }\n  ballBig(ball){\n    ball.radius = Math.min( ball.radius + 2, BallOptions.maxBallsize );\n  }\n  ballSmall(ball){\n    ball.radius = Math.max( ball.radius - 2, BallOptions.minBallsize );\n  }\n\n  resetGame(){\n    // reset number of balls\n    BallOptions.number = 1;\n    // create a new ball for the game\n    this.ball = {};\n    for (let i = 0; i < BallOptions.number; i++){\n      this.ball[`new_${i}`] = new Ball(\n        [i], // nth of the  ball\n        this.width, // width of the Board\n        this.height, // width of the Board\n        BallOptions.ballSize[i], // size of each balls in settings.js (Default: 8)\n        BallOptions.ballColor[i] // color of each balls in settings.js (Default: white)\n        );\n    }   \n    // reset speed of balls\n    BallOptions.speed = 3.5;\n    \n    // reset the winner\n      this.winner = undefined;   \n    // the paddle properties\n    this.player1.x = PaddleOptions.boardGap;\n    this.player1.y = ((this.height - PaddleOptions.paddleHeight) / 2);\n    this.player1.height = PaddleOptions.paddleHeight;\n    this.player2.x = this.width - (PaddleOptions.paddleWidth + PaddleOptions.boardGap);\n    this.player2.y = ((this.height - PaddleOptions.paddleHeight) / 2);\n    this.player2.height = PaddleOptions.paddleHeight;\n    // the scores\n    this.player1.score = 0;\n    this.player2.score = 0; \n    \n    this.ballSize = {};\n    this.changeSize();\n    \n  } // end of resetGame()\n\n  render() {\n    // if pause === true, render stop\n    if ( this.pause ) { return }\n    \n    // hide the first screen when game begins\n    if ( this.startPlay === true ){ this.showFirstScreen = false; }\n    \n    // properties for SVG tag\n    this.gameElement.innerHTML = ''; // Clear the html before appending to fix a render bug 👾\n    let svg = document.createElementNS(SVG_NS, \"svg\");\n    svg.setAttributeNS(null, \"width\", this.width);\n    svg.setAttributeNS(null, \"height\", this.height);\n    svg.setAttributeNS(null, \"viewBox\", [0, 0, this.width, this.height]);\n    this.gameElement.appendChild(svg);\n\n    // Render the board\n    this.board.render(svg);\n    \n    // Render first screen contents\n    if (this.showFirstScreen === true){\n      this.initPlayer1.render(svg, !this.isMulti);\n      this.initPlayer2.render(svg, this.isMulti);\n      this.caption.render(svg);\n    }\n    \n    // Assign who is the winner\n    this.winner = this.displayWinner.winnerIs(this.player1.score, this.player2.score);\n  \n    // Display the winner of the game\n    if ( this.winner ) {\n      this.displayWinner.render(svg, this.winner);\n      return\n    }\n    \n    // Render game contents\n    if ( this.startPlay === true ){\n      // Play single-player mode\n      if ( !this.isMulti ){ this.singlePlay.render(svg); }\n      // Play muti-players mode\n      else { \n        this.multiPlay(svg);\n       }\n    }\n  } // end of render()\n}","import './styles/game.css';\nimport Game from './partials/Game';\n\n// create a game instance\nconst game = new Game('game', 512, 256);\n(function gameLoop() {\n  game.render(); //  render method calls continously in gameLoop\n  requestAnimationFrame(gameLoop);\n})();"]}