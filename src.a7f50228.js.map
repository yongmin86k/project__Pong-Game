{"version":3,"sources":["src/settings.js","src/partials/Init.js","src/partials/Board.js","src/partials/Net.js","src/partials/Paddle.js","src/partials/Ball.js","src/partials/Score.js","src/partials/SingleMode.js","src/partials/Winner.js","src/partials/Game.js","src/index.js"],"names":["SVG_NS","GameOptions","winningScore","intervalGameTime","KEYS","right","left","a","z","up","down","spaceBar","enter","ballFast","ballSlow","ballBig","ballSmall","ballPlus","ballMinus","PaddleOptions","paddleWidth","paddleHeight","paddleMinHeight","boardGap","player1Color","player2Color","speed","force","BallOptions","number","maxBallNum","minBallNum","minSpeed","maxSpeed","ballSize","maxBallsize","minBallsize","ballColor","Init","x","y","text","textSize","animate","limit","svg","selected","color","document","createElementNS","setAttributeNS","textContent","appendChild","Board","width","height","rect","Net","line","Paddle","boardHeight","upKey","downKey","score","keyState","addEventListener","event","keyCode","Math","max","min","Ball","index","boardWidth","radius","direction","ping","Audio","pingSound","gameTime","collisionTime1","collisionTime2","paddlePosition1","paddlePosition2","ballSpeed","reset","changeSpeed","vx","vy","hitTop","hitBottom","player1","player2","yDirection","detectMovement","abs","play","dePaddle","player","paddle","recordPos","unshift","length","pop","every","pos","objBall","logPlayerPosition","circle","rightGoal","leftGoal","goal","Object","keys","wallCollision","paddleCollision","Score","size","SingleMode","tspan","tspan2","append","Winner","winner","score1","score2","player1_isWinner","player2_isWinner","Game","element","gameElement","getElementById","initFirstScr","board","net","singlePlay","showFirstScreen","isMulti","pause","startPlay","resetGame","rdmIndex1","floor","random","rdmIndex2","ball","undefined","displayWinner","initPlayer1","initPlayer2","caption","render","i","lastBall","changeSize","innerHTML","winnerIs","multiPlay","game","gameLoop","requestAnimationFrame"],"mappings":"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","file":"src.a7f50228.js","sourceRoot":"..","sourcesContent":["export const SVG_NS  = 'http://www.w3.org/2000/svg';\n\nexport const GameOptions = {\n    winningScore: 10,\n    intervalGameTime: 30, // unit is FPS\n}\n\n// key setting for the player 1 and player 2\nexport const KEYS = {\n    right: 39,\n    left: 37,\n    a: 65,        \n    z: 90,        \n    up: 38, \n    down: 40,\n    spaceBar: 32,\n    enter: 13,\n    ballFast: 70,\n    ballSlow: 86,\n    ballBig: 71,\n    ballSmall: 66,\n    ballPlus: 72,\n    ballMinus: 78,\n  }\n\n// properties of Paddle\nexport const PaddleOptions = {\n    paddleWidth : 8,\n    paddleHeight : 72,\n    paddleMinHeight : 32,\n    boardGap : 10,\n    player1Color: '#FF0000',\n    player2Color: '#00FFFF',\n    speed: 1,\n    force: 0.25,\n}\n\n// properties of Ball\nexport const BallOptions = {\n    number: 1,  // must be larger than 0 \n                // must be same in Game.js reset section => BallOptions.number\n    maxBallNum: 10,\n    minBallNum: 1,\n    speed: 3.5, // must be larger than 0 \n                // must be same in Game.js reset section => BallOptions.speed\n    minSpeed: 1,\n    maxSpeed: 10,\n    ballSize: [8, 10, 12, 14],\n    maxBallsize: 56,\n    minBallsize: 4, // must be larger than 0\n    ballColor: ['rgba(240,240,240,0.8)', 'rgba(37,212,255,0.6)', 'rgba(255,252,37,0.6)', 'rgba(40,255,37,0.6)']\n}","import { SVG_NS } from \"../settings\";\n\nexport default class Init {\n    constructor(x, y, text, textSize = 20){\n        this.x = x;\n        this.y = y;\n        this.text = text;\n        this.textSize = textSize;\n        this.animate = 0;\n        this.limit = 32;\n    }\n\n    render(svg, selected){\n        // flash the selected game option\n        if ( selected && this.animate < this.limit ){\n            this.color = 'white';\n        } else if ( selected && (this.animate >= this.limit && this.animate < this.limit * 2)){\n            this.color = 'transparent';\n        } else if (this.animate >= this.limit * 2) {\n            this.animate = 0;\n        } else if (!selected){\n            this.animate = 0;\n            this.color = 'grey';\n        };\n        this.animate++;\n        \n        // renders svg texts\n        let text = document.createElementNS(SVG_NS, 'text');\n\n        text.setAttributeNS(null, 'x', this.x );\n        text.setAttributeNS(null, 'y', this.y );\n        text.setAttributeNS(null, 'font-family', `'Silkscreen Web', monotype`);\n        text.setAttributeNS(null, 'font-size', this.textSize );\n        text.setAttributeNS(null, 'fill', this.color);\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n        text.setAttributeNS(null, 'cursor', 'pointer');\n        text.textContent = this.text;\n\n        svg.appendChild(text);\n    }\n}","import { SVG_NS } from \"../settings\";\n\nexport default class Board {\n    constructor(width, height) {\n      this.width = width;\n      this.height = height;\n    } // end of constructor\n    \n    render(svg) {\n      // create rect\n        let rect = document.createElementNS(SVG_NS, 'rect');\n        rect.setAttributeNS(null, 'fill', '#353535');\n        rect.setAttributeNS(null, 'width', this.width);\n        rect.setAttributeNS(null, 'height', this.height);\n\n        // append rect\n        svg.appendChild(rect);\n    }\n  }","import { SVG_NS } from \"../settings\";\nexport default class Net {\n    constructor(width, height) {\n      this.width = width;\n      this.height = height;\n    } // end of constructor\n    \n    render(svg) {\n      // create line\n        let line = document.createElementNS(SVG_NS, 'line');\n        line.setAttributeNS(null, 'x1', (this.width / 2) );\n        line.setAttributeNS(null, 'y1', 0 );\n        line.setAttributeNS(null, 'x2', (this.width / 2) );\n        line.setAttributeNS(null, 'y2', this.height );\n  \n        line.setAttributeNS(null, 'stroke', '#FFFFFF');\n        line.setAttributeNS(null, 'stroke-width', 2);\n        line.setAttributeNS(null, 'stroke-dasharray', [16, 34]);\n        line.setAttributeNS(null, 'stroke-dashoffset', 4);\n  \n        // append line\n        svg.appendChild(line);\n    }\n  }","import { SVG_NS, KEYS, PaddleOptions } from \"../settings\";\n\nexport default class Paddle {\n    constructor(boardHeight, width, height, x, y, force = 0, color = '#FFFFFF', upKey, downKey) {\n        this.boardHeight = boardHeight;\n        this.width = width;\n        this.height = height;\n        this.x = x;\n        this.y = y;\n        this.speed = PaddleOptions.speed;\n        this.force = force;\n        this.score = 0;\n        this.color = color;\n        this.upKey = upKey;\n        this.downKey = downKey;\n\n        this.keyState = {}; // update which keys are pressing\n\n        document.addEventListener('keydown', event => {\n            this.keyState[event.keyCode] = true;\n        });\n        document.addEventListener('keyup', event => {\n            this.force = 0;\n            this.keyState[event.keyCode] = false;\n        });\n    } // end of constructor\n\n    up(){\n        // move the paddle up but not above the top of the board\n        const speed = this.speed + this.force;\n        this.y = Math.max( this.y - speed, 0 );\n        this.force += PaddleOptions.force;\n    }\n\n    down(){\n        // move the paddle down but not more than the bottom of the board\n        const speed = this.speed + this.force;\n        this.y = Math.min( this.y + speed, (this.boardHeight - this.height) );\n        this.force += PaddleOptions.force;\n    }\n    \n    render(svg) {\n        // smoothen movement of paddles\n        if (this.keyState[KEYS.a] && this.upKey === KEYS.a ) {\n            this.up();\n        }\n        if (this.keyState[KEYS.z] && this.downKey === KEYS.z ) {\n            this.down();\n        }\n        if (this.keyState[KEYS.up] && this.upKey === KEYS.up ) {\n            this.up();\n        }\n        if (this.keyState[KEYS.down] && this.downKey === KEYS.down ) {\n            this.down();\n        }\n\n        // create SVG of rect\n        let rect = document.createElementNS(SVG_NS, 'rect');\n        rect.setAttributeNS(null, 'fill', this.color);\n        rect.setAttributeNS(null, 'width', this.width);\n        rect.setAttributeNS(null, 'height', this.height);\n        rect.setAttributeNS(null, 'x', this.x);\n        rect.setAttributeNS(null, 'y', this.y);\n\n        // append SVG\n        svg.appendChild(rect);\n    }\n}\n\n","import { SVG_NS, KEYS, PaddleOptions, BallOptions, GameOptions } from \"../settings\";\nimport pingSound from \"../../public/sounds/pong-01.wav\";\n\nexport default class Ball {\n    constructor(index, boardWidth, boardHeight, radius = 8, color = '#FFFFFF') {\n      this.index = index;\n      this.boardWidth = boardWidth;\n      this.boardHeight = boardHeight;\n      this.radius = radius;\n      this.color = color;\n      this.direction = 1;\n\n      this.ping = new Audio(pingSound);\n\n      this.gameTime = 0; // Time for game play in FPS\n      this.collisionTime1 = 0;\n      this.collisionTime2 = 0;\n\n      this.paddlePosition1 = [];\n      this.paddlePosition2 = [];\n\n      this.ballSpeed = 0.3;\n\n      this.reset();\n      this.changeSpeed();\n      \n    } // end of constructor\n\n    reset(){\n      this.x = this.boardWidth / 2;\n      this.y = this.boardHeight / 2;\n      this.vx = 0;\n      this.vy = 0;\n\n      this.vx = this.direction * BallOptions.speed;\n      this.vy = 0;\n\n      // Reset the time when either player scores\n      if (this.gameTime >= GameOptions.intervalGameTime ){ \n        this.gameTime = 0;\n        this.collisionTime1 = 0;\n        this.collisionTime2 = 0;\n       }\n    }\n\n    wallCollision(){\n      const hitTop = this.y - this.radius <= 0;\n      const hitBottom = this.y + this.radius >= this.boardHeight;\n      if (hitTop || hitBottom ){ this.vy *= -1; }\n    }\n\n    paddleCollision(player1, player2) {\n      if (this.vx > 0) { // moving right\n        // collision detection for player2\n        if ( this.x + this.radius >= player2.x && \n          this.x + this.radius <= player2.x + player2.width &&\n          ( this.y >= player2.y && this.y <= player2.y + player2.height )\n          ){\n            // add spins to the ball in response to the direction of a paddle\n            let yDirection;\n            if ( player2.keyState[38] ){ yDirection = -1; } \n            else if ( player2.keyState[40] ){ yDirection = 1; } \n            else { yDirection = 0; }\n\n            // detect paddle movement\n            // if not moved, return force = 0\n            this.detectMovement(player2, this.paddlePosition2);\n\n            this.vy += (yDirection * player2.force) / 2;\n            // speed up\n            this.vx = Math.min(Math.abs(this.vx + this.ballSpeed), 8.5) * -1;\n            this.ping.play(); // play the sound when paddle hits the ball          \n\n            // decrease size of the player's paddle \n            player2.height = this.dePaddle(player2.height);\n\n            // assign collisionTime for player 2\n            this.collisionTime2 = this.gameTime + 10;\n        }\n      } else { // moving left\n        // collision detection for player1\n        if ( this.x - this.radius >= player1.x && \n          this.x - this.radius <= player1.x + player1.width &&\n          (this.y >= player1.y && this.y <= player1.y + player1.height) \n          ){\n            let yDirection;\n            if ( player1.keyState[65] ){ yDirection = -1; } \n            else if ( player1.keyState[90] ){ yDirection = 1; } \n            else { yDirection = 0; }\n\n            this.detectMovement(player1, this.paddlePosition1);\n\n            this.vy += (yDirection * player1.force) / 2;\n            // speed up\n            this.vx = Math.min(Math.abs(this.vx) + this.ballSpeed, 8.5);\n            this.ping.play();\n\n            player1.height = this.dePaddle(player1.height);\n\n            this.collisionTime1 = this.gameTime + 10;\n          }\n      }\n      \n      // changes paddle color\n      if (this.gameTime < this.collisionTime1){\n        player1.color = 'white';\n      } else {\n        player1.color = PaddleOptions.player1Color;\n      }\n\n      if (this.gameTime < this.collisionTime2){\n        player2.color = 'white';\n      } else {\n        player2.color = PaddleOptions.player2Color;\n      }\n      \n    } // end of paddleCollision()\n    \n    goal(player) {\n      player.score++;\n      // this.reset();\n    }\n\n    // change the speed of balls\n    changeSpeed(){\n      document.addEventListener('keydown', event => {\n        switch(event.keyCode){\n          case KEYS.ballFast:\n              if ( this.vx > 0){ \n                this.vx = Math.min(this.vx + 1, BallOptions.maxSpeed);\n              } else { \n                this.vx = Math.max((Math.abs(this.vx) + 1) * -1, -BallOptions.maxSpeed);\n              }\n              if ( this.vy > 0){ \n                this.vy = Math.min(this.vy + 1, BallOptions.maxSpeed);\n              } else { \n                this.vy = Math.max((Math.abs(this.vy) + 1) * -1, -BallOptions.maxSpeed);\n              }\n            break;\n          case KEYS.ballSlow:\n              if ( this.vx > 0){ \n                this.vx = Math.max(this.vx - 1, BallOptions.minSpeed);\n              } else { \n                this.vx = Math.min((Math.abs(this.vx) - 1) * -1, -BallOptions.minSpeed);\n              }\n              if ( this.vy > 0){ \n                this.vy = Math.max(this.vy - 1, BallOptions.minSpeed);\n              } else { \n                this.vy = Math.min((Math.abs(this.vy) - 1) * -1, -BallOptions.minSpeed);\n              }\n            break;\n        }\n\n      });\n    }\n\n    // decrease the size of opponent's paddle\n    dePaddle(paddle){\n      return Math.max(paddle - 8, PaddleOptions.paddleMinHeight);\n    }\n\n    logPlayerPosition(player, recordPos){\n      recordPos.unshift(player.y);\n      if (recordPos.length > 5){ recordPos.pop(); }\n    }\n    \n    detectMovement(player, recordPos){\n      const notMoved = recordPos.every(pos=> pos === recordPos[0])\n      if (notMoved){ player.force = 0; }\n    }\n\n    render(svg, player1, player2, objBall){\n      this.gameTime++;\n      this.logPlayerPosition(player1, this.paddlePosition1);\n      this.logPlayerPosition(player2, this.paddlePosition2);\n      \n      // initiate the ball moving after intervalGameTime(settings.js)\n      if (this.gameTime < GameOptions.intervalGameTime){\n        this.reset();\n      } else {\n        this.x += this.vx; \n        this.y += this.vy;  \n      } \n      // create a ball\n      let circle = document.createElementNS(SVG_NS, 'circle');\n        circle.setAttributeNS(null, 'r', this.radius);\n        circle.setAttributeNS(null, 'fill', this.color);\n        circle.setAttributeNS(null, 'cx', this.x);\n        circle.setAttributeNS(null, 'cy', this.y);\n\n        svg.appendChild(circle);\n      \n      // change ball direction when a player scores\n      const rightGoal = this.x + this.radius >= this.boardWidth;\n      const leftGoal = this.x - this.radius <= 0;\n      \n      if ( rightGoal ) {\n        this.direction = 1;\n        this.goal(player1);\n      } else if ( leftGoal ){\n        this.direction = -1;\n        this.goal(player2);\n      }\n      if (rightGoal || leftGoal){\n        this.reset();\n\n        // reset the position of paddles only the number of balls is greater than 1\n        if ( Object.keys(objBall).length === 1){\n          player1.y = ((this.boardHeight - PaddleOptions.paddleHeight) / 2);\n          player1.height = PaddleOptions.paddleHeight;\n\n          player2.y = ((this.boardHeight - PaddleOptions.paddleHeight) / 2);\n          player2.height = PaddleOptions.paddleHeight;\n        }\n      }\n    \n      // bounce when the ball hits the walls\n      this.wallCollision(this.gameTime);\n      \n      // reflect when the ball hits the paddle\n      this.paddleCollision(player1, player2);\n\n    } // end of render()\n}","import { SVG_NS } from \"../settings\";\nexport default class Score {\n    constructor(x, y = 40, size = 32) {\n      this.x = x;\n      this.y = y;\n      this.size = size;\n    }\n    \n    render(svg, score) {\n        let text = document.createElementNS(SVG_NS, 'text');\n        text.setAttributeNS(null, 'x', this.x );\n        text.setAttributeNS(null, 'y', this.y );\n        text.setAttributeNS(null, 'font-family', `'Silkscreen Web', monotype`);\n        text.setAttributeNS(null, 'font-size', this.size );\n        text.setAttributeNS(null, 'fill', '#FFFFFF');\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n\n        text.textContent = score;\n\n        svg.appendChild(text);\n    }\n  }","import { SVG_NS, KEYS } from \"../settings\";\n\nexport default class SingleMode {\n    constructor(boardWidth, boardHeight){\n        this.x = boardWidth / 2;\n        this.y = (boardHeight / 2) - 40;\n        this.animate = 0;\n        this.limit = 16;\n    }\n\n    render(svg){\n        let text = document.createElementNS(SVG_NS, 'text');\n        let tspan = document.createElementNS(SVG_NS, 'tspan');\n        let tspan2 = document.createElementNS(SVG_NS, 'tspan');\n        text.setAttributeNS(null, 'x', this.x);\n        text.setAttributeNS(null, 'y', this.y);\n        text.setAttributeNS(null, 'fill', '#FFFFFF');\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n        text.setAttributeNS(null, 'fill', '#FFFFFF');\n        text.setAttributeNS(null, 'font-family', `'Silkscreen Web', monotype`);\n        text.setAttributeNS(null, 'font-size', 32 );\n\n        tspan.setAttributeNS(null, 'x', this.x);\n        tspan.setAttributeNS(null, 'y', this.y + 32);\n        tspan.setAttributeNS(null, 'font-size', 20 );\n\n        tspan2.setAttributeNS(null, 'x', this.x);\n        tspan2.setAttributeNS(null, 'y', this.y + 140);\n        tspan2.setAttributeNS(null, 'font-size', 16 );\n        tspan2.setAttributeNS(null, 'fill', 'transparent');\n        // flash the return text \n        if ( this.animate < this.limit ){\n            tspan2.setAttributeNS(null, 'fill', 'transparent');\n        } else if ( this.animate >= this.limit && this.animate < this.limit * 2 ){\n            tspan2.setAttributeNS(null, 'fill', '#70B2B1');\n        } else if ( this.animate >= this.limit * 2 && this.animate < this.limit * 3 ){\n            tspan2.setAttributeNS(null, 'fill', '#26601F');\n        } else if ( this.animate >= this.limit * 3 && this.animate < this.limit * 4 ){\n            tspan2.setAttributeNS(null, 'fill', '#70B2B1');\n        } else if (this.animate >= this.limit * 4 ) {\n            this.animate = 0;\n        }\n        this.animate++;\n        \n        text.textContent = 'Sorry';\n        tspan.textContent = 'Signle mode is not available';\n        tspan2.textContent = 'Press <Enter> to go back';\n        \n        svg.append(text);\n        text.append(tspan, tspan2);\n    }\n}","import { SVG_NS, GameOptions } from \"../settings\";\n\n// method to define who is the winner\nexport default class Winner {\n    constructor( boardWidth ){\n        this.x = boardWidth / 2;\n        this.animate = 0;\n        this.limit = 16;\n    }\n\n    render(svg, winner){\n        let text = document.createElementNS(SVG_NS, 'text');\n        let tspan = document.createElementNS(SVG_NS, 'tspan');\n        let tspan2 = document.createElementNS(SVG_NS, 'tspan');\n        let y = 120;\n        text.setAttributeNS(null, 'x', this.x );\n        text.setAttributeNS(null, 'y', y );\n        text.setAttributeNS(null, 'font-family', `'Silkscreen Web', monotype`);\n        text.setAttributeNS(null, 'font-size', 24 );\n        text.setAttributeNS(null, 'fill', '#FFFFFF');\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n\n        tspan.setAttributeNS(null, 'x', this.x );\n        tspan.setAttributeNS(null, 'y', y + 40);\n        tspan.setAttributeNS(null, 'text-anchor', 'middle');\n        tspan.setAttributeNS(null, 'fill', 'transparent');\n        // flash the return text \n        if ( this.animate < this.limit ){\n            tspan.setAttributeNS(null, 'fill', 'transparent');\n        } else if ( this.animate >= this.limit && this.animate < this.limit * 2 ){\n            tspan.setAttributeNS(null, 'fill', '#70B2B1');\n        } else if ( this.animate >= this.limit * 2 && this.animate < this.limit * 3 ){\n            tspan.setAttributeNS(null, 'fill', '#26601F');\n        } else if ( this.animate >= this.limit * 3 && this.animate < this.limit * 4 ){\n            tspan.setAttributeNS(null, 'fill', '#70B2B1');\n        } else if (this.animate >= this.limit * 4 ) {\n            this.animate = 0;\n        }\n        this.animate++;\n\n        tspan2.setAttributeNS(null, 'x', this.x );\n        tspan2.setAttributeNS(null, 'y', y + 116 );\n        tspan2.setAttributeNS(null, 'text-anchor', 'middle');\n        tspan2.setAttributeNS(null, 'fill', 'grey');\n        tspan2.setAttributeNS(null, 'font-size', 12 );\n        \n        text.textContent = `The winner is `;\n        tspan.textContent = winner;\n        tspan2.textContent = 'Press <Enter> to return';\n\n        svg.appendChild(text);\n        text.appendChild(tspan);\n        text.appendChild(tspan2);\n    }\n\n    winnerIs(score1, score2){ \n        const player1_isWinner = score1 >= GameOptions.winningScore;\n        const player2_isWinner = score2 >= GameOptions.winningScore;\n\n        if ( player1_isWinner ){\n            return this.winner = 'player 1';\n        } else if ( player2_isWinner ){\n            return this.winner = 'player 2';\n        }\n    }\n}","import Init from \"./Init\";\nimport Board from \"./Board\";\nimport Net from \"./Net\";\nimport Paddle from \"./Paddle\";\nimport Ball from \"./Ball\";\nimport Score from \"./Score\";\nimport SingleMode from \"./SingleMode\";\nimport Winner from \"./Winner\";\nimport { SVG_NS, KEYS, PaddleOptions, BallOptions } from \"../settings\";\n\nexport default class Game {\n  constructor(element, width, height) {\n    this.element = element;\n    this.width = width;\n    this.height = height;\n    \n    // SVG container\n    this.gameElement = document.getElementById(this.element);\n    \n    // initiate the first screen of game\n    this.initFirstScr();\n\n    // create the board and net with same size of the SVG container\n    this.board = new Board(this.width, this.height);\n    this.net = new Net(this.width, this.height);\n\n    // create single-play mode notice\n    this.singlePlay = new SingleMode(this.width, this.height);\n\n    // create new paddles for the each players\n    this.player1 = new Paddle(\n      this.height,\n      PaddleOptions.paddleWidth,\n      PaddleOptions.paddleHeight,\n      PaddleOptions.boardGap,\n      ((this.height - PaddleOptions.paddleHeight) / 2),\n      0,\n      PaddleOptions.player1Color,\n      KEYS.a,\n      KEYS.z,\n    );\n    this.player2 = new Paddle(\n      this.height,\n      PaddleOptions.paddleWidth,\n      PaddleOptions.paddleHeight,\n      this.width - (PaddleOptions.paddleWidth + PaddleOptions.boardGap),\n      ((this.height - PaddleOptions.paddleHeight) / 2),\n      0,\n      PaddleOptions.player2Color,\n      KEYS.up,\n      KEYS.down,\n    );\n\n    // create scores for players\n    this.score1 = new Score(this.width / 2 - 40, 40, 32);\n    this.score2 = new Score(this.width / 2 + 40, 40, 32);\n\n    // switch between first screen and game screen\n    this.showFirstScreen = true;\n    \n    // keys of switches which affect gameplay\n    document.addEventListener('keydown', event => {\n      switch(event.keyCode){\n        case KEYS.right:\n          if ( this.showFirstScreen === true ){\n            this.isMulti = !this.isMulti;\n          }\n          break;\n        case KEYS.left:\n          if ( this.showFirstScreen === true ){\n            this.isMulti = !this.isMulti;\n          }\n          break;\n        case KEYS.spaceBar:\n          this.pause = !this.pause;\n          break;\n        case KEYS.enter:\n          this.startPlay =!this.startPlay;\n          this.showFirstScreen = true; // return to the first screen\n          // reset the game properties\n          this.resetGame();\n          break;\n          \n        // change the number of balls\n        case KEYS.ballPlus:\n          if (this.isMulti){\n            BallOptions.number = Math.min(BallOptions.number + 1, BallOptions.maxBallNum);\n          \n            let index = BallOptions.number -1;\n            let rdmIndex1 = Math.floor(Math.random() * 4);\n            let rdmIndex2 = Math.floor(Math.random() * 4);\n            \n            this.ball[`new_${index}`] = new Ball(\n              [index],\n              this.width,\n              this.height,\n              BallOptions.ballSize[rdmIndex1],\n              BallOptions.ballColor[rdmIndex2]\n            );\n            break;\n          }\n        case KEYS.ballMinus:\n          if (this.isMulti){\n            if (BallOptions.number > 1){\n              BallOptions.number = Math.max(BallOptions.number - 1, BallOptions.minBallNum);\n              let index = BallOptions.number;\n              this.ball[`new_${index}`] = undefined;\n            }\n          }\n          break;\n      }\n    }); // end of keypress Event\n\n    // new Object and instance for the winner\n    this.winner;\n    this.displayWinner = new Winner(this.width);\n\n  } /* \n    // end of constructor\n    */\n\n  initFirstScr(){\n    this.initPlayer1 = new Init(\n      (this.width / 2) - 100, \n      (this.height / 2) + 8, \n      '> Single',\n    );\n    this.initPlayer2 = new Init(\n      (this.width / 2) + 100, \n      (this.height / 2) + 8, \n      '> Multi',\n    );\n    this.caption = new Init(\n      this.width / 2,\n      this.height - 20,\n      'Press <- or -> to select the mode and hit <Enter>',\n      12\n    );\n  }\n  \n  multiPlay(svg){\n    // Render the net\n    this.net.render(svg);\n    \n    // Render the paddles\n    this.player1.render(svg);\n    this.player2.render(svg);\n    \n    // Render the ball\n    let i = 0;\n    for (i; i < BallOptions.number; i++){\n      this.ball[`new_${i}`].render(svg, this.player1, this.player2, this.ball);\n    }\n\n    // Update scores\n    this.score1.render(svg, this.player1.score);\n    this.score2.render(svg, this.player2.score);\n\n    let lastBall = `new_${i - 1}`;\n    if (this.ballSize[KEYS.ballBig]) {\n      this.ballBig(this.ball[lastBall]);\n    }\n    if (this.ballSize[KEYS.ballSmall]){\n      this.ballSmall(this.ball[lastBall]);\n    }\n  } // end of multiPlay()\n\n  // change the size of balls\n  changeSize(){\n    document.addEventListener('keydown', event => {\n      this.ballSize[event.keyCode] = true;\n    });\n    document.addEventListener('keyup', event => {\n      this.ballSize[event.keyCode] = false;\n    })\n  }\n  ballBig(ball){\n    ball.radius = Math.min( ball.radius + 2, BallOptions.maxBallsize );\n  }\n  ballSmall(ball){\n    ball.radius = Math.max( ball.radius - 2, BallOptions.minBallsize );\n  }\n\n  resetGame(){\n    // reset number of balls\n    BallOptions.number = 1;\n    // create a new ball for the game\n    this.ball = {};\n    for (let i = 0; i < BallOptions.number; i++){\n      this.ball[`new_${i}`] = new Ball(\n        [i], // nth of the  ball\n        this.width, // width of the Board\n        this.height, // width of the Board\n        BallOptions.ballSize[i], // size of each balls in settings.js (Default: 8)\n        BallOptions.ballColor[i] // color of each balls in settings.js (Default: white)\n        );\n    }   \n    // reset speed of balls\n    BallOptions.speed = 3.5;\n    \n    // reset the winner\n      this.winner = undefined;   \n    // the paddle properties\n    this.player1.x = PaddleOptions.boardGap;\n    this.player1.y = ((this.height - PaddleOptions.paddleHeight) / 2);\n    this.player1.height = PaddleOptions.paddleHeight;\n    this.player2.x = this.width - (PaddleOptions.paddleWidth + PaddleOptions.boardGap);\n    this.player2.y = ((this.height - PaddleOptions.paddleHeight) / 2);\n    this.player2.height = PaddleOptions.paddleHeight;\n    // the scores\n    this.player1.score = 0;\n    this.player2.score = 0; \n    \n    this.ballSize = {};\n    this.changeSize();\n    \n  } // end of resetGame()\n\n  render() {\n    // if pause === true, render stop\n    if ( this.pause ) { return }\n    \n    // hide the first screen when game begins\n    if ( this.startPlay === true ){ this.showFirstScreen = false; }\n    \n    // properties for SVG tag\n    this.gameElement.innerHTML = ''; // Clear the html before appending to fix a render bug 👾\n    let svg = document.createElementNS(SVG_NS, \"svg\");\n    svg.setAttributeNS(null, \"width\", this.width);\n    svg.setAttributeNS(null, \"height\", this.height);\n    svg.setAttributeNS(null, \"viewBox\", [0, 0, this.width, this.height]);\n    this.gameElement.appendChild(svg);\n\n    // Render the board\n    this.board.render(svg);\n    \n    // Render first screen contents\n    if (this.showFirstScreen === true){\n      this.initPlayer1.render(svg, !this.isMulti);\n      this.initPlayer2.render(svg, this.isMulti);\n      this.caption.render(svg);\n    }\n    \n    // Assign who is the winner\n    this.winner = this.displayWinner.winnerIs(this.player1.score, this.player2.score);\n  \n    // Display the winner of the game\n    if ( this.winner ) {\n      this.displayWinner.render(svg, this.winner);\n      return\n    }\n    \n    // Render game contents\n    if ( this.startPlay === true ){\n      // Play single-player mode\n      if ( !this.isMulti ){ this.singlePlay.render(svg); }\n      // Play muti-players mode\n      else { \n        this.multiPlay(svg);\n       }\n    }\n  } // end of render()\n}","import './styles/game.css';\nimport Game from './partials/Game';\n\n// create a game instance\nconst game = new Game('game', 512, 256);\n(function gameLoop() {\n  game.render(); //  render method calls continously in gameLoop\n  requestAnimationFrame(gameLoop);\n})();"]}